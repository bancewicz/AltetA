
alteta_as2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002dc  00800100  00001d32  00001dc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001d4  008003dc  008003dc  000020a2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000020a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002100  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  00002140  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000031c1  00000000  00000000  00002410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001191  00000000  00000000  000055d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016bd  00000000  00000000  00006762  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000720  00000000  00000000  00007e20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d34  00000000  00000000  00008540  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001450  00000000  00000000  00009274  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  0000a6c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__ctors_end>
       4:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
       8:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
       c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      10:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      14:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      18:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      1c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      20:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      24:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      28:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      2c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      30:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      34:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      38:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      3c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      40:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      44:	0c 94 01 06 	jmp	0xc02	; 0xc02 <__vector_17>
      48:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__vector_18>
      4c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      50:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      54:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      58:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      5c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      60:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      64:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      68:	11 02       	muls	r17, r17
      6a:	6b 02       	muls	r22, r27
      6c:	6b 02       	muls	r22, r27
      6e:	6b 02       	muls	r22, r27
      70:	6b 02       	muls	r22, r27
      72:	6b 02       	muls	r22, r27
      74:	6b 02       	muls	r22, r27
      76:	6b 02       	muls	r22, r27
      78:	6b 02       	muls	r22, r27
      7a:	6b 02       	muls	r22, r27
      7c:	6b 02       	muls	r22, r27
      7e:	6b 02       	muls	r22, r27
      80:	23 02       	muls	r18, r19
      82:	6b 02       	muls	r22, r27
      84:	6b 02       	muls	r22, r27
      86:	6b 02       	muls	r22, r27
      88:	08 02       	muls	r16, r24
      8a:	6b 02       	muls	r22, r27
      8c:	6b 02       	muls	r22, r27
      8e:	6b 02       	muls	r22, r27
      90:	6b 02       	muls	r22, r27
      92:	6b 02       	muls	r22, r27
      94:	6b 02       	muls	r22, r27
      96:	6b 02       	muls	r22, r27
      98:	6b 02       	muls	r22, r27
      9a:	6b 02       	muls	r22, r27
      9c:	6b 02       	muls	r22, r27
      9e:	6b 02       	muls	r22, r27
      a0:	1a 02       	muls	r17, r26
      a2:	6b 02       	muls	r22, r27
      a4:	6b 02       	muls	r22, r27
      a6:	6b 02       	muls	r22, r27
      a8:	2c 02       	muls	r18, r28
      aa:	6b 02       	muls	r22, r27
      ac:	6b 02       	muls	r22, r27
      ae:	6b 02       	muls	r22, r27
      b0:	6b 02       	muls	r22, r27
      b2:	6b 02       	muls	r22, r27
      b4:	6b 02       	muls	r22, r27
      b6:	6b 02       	muls	r22, r27
      b8:	6b 02       	muls	r22, r27
      ba:	6b 02       	muls	r22, r27
      bc:	6b 02       	muls	r22, r27
      be:	6b 02       	muls	r22, r27
      c0:	6b 02       	muls	r22, r27
      c2:	6b 02       	muls	r22, r27
      c4:	6b 02       	muls	r22, r27
      c6:	6b 02       	muls	r22, r27
      c8:	35 02       	muls	r19, r21
      ca:	6b 02       	muls	r22, r27
      cc:	6b 02       	muls	r22, r27
      ce:	3e 02       	muls	r19, r30
      d0:	6b 02       	muls	r22, r27
      d2:	6b 02       	muls	r22, r27
      d4:	6b 02       	muls	r22, r27
      d6:	6b 02       	muls	r22, r27
      d8:	6b 02       	muls	r22, r27
      da:	6b 02       	muls	r22, r27
      dc:	47 02       	muls	r20, r23
      de:	6b 02       	muls	r22, r27
      e0:	6b 02       	muls	r22, r27
      e2:	ff 01       	movw	r30, r30
      e4:	6b 02       	muls	r22, r27
      e6:	6b 02       	muls	r22, r27
      e8:	6b 02       	muls	r22, r27
      ea:	6b 02       	muls	r22, r27
      ec:	6b 02       	muls	r22, r27
      ee:	6b 02       	muls	r22, r27
      f0:	6b 02       	muls	r22, r27
      f2:	6b 02       	muls	r22, r27
      f4:	6b 02       	muls	r22, r27
      f6:	6b 02       	muls	r22, r27
      f8:	6b 02       	muls	r22, r27
      fa:	6b 02       	muls	r22, r27
      fc:	6b 02       	muls	r22, r27
      fe:	6b 02       	muls	r22, r27
     100:	50 02       	muls	r21, r16
     102:	6b 02       	muls	r22, r27
     104:	6b 02       	muls	r22, r27
     106:	6b 02       	muls	r22, r27
     108:	59 02       	muls	r21, r25
     10a:	6b 02       	muls	r22, r27
     10c:	6b 02       	muls	r22, r27
     10e:	6b 02       	muls	r22, r27
     110:	6b 02       	muls	r22, r27
     112:	6b 02       	muls	r22, r27
     114:	6b 02       	muls	r22, r27
     116:	6b 02       	muls	r22, r27
     118:	6b 02       	muls	r22, r27
     11a:	6b 02       	muls	r22, r27
     11c:	6b 02       	muls	r22, r27
     11e:	6b 02       	muls	r22, r27
     120:	62 02       	muls	r22, r18

00000122 <__trampolines_end>:
     122:	63 64       	ori	r22, 0x43	; 67
     124:	69 6e       	ori	r22, 0xE9	; 233
     126:	6f 70       	andi	r22, 0x0F	; 15
     128:	73 75       	andi	r23, 0x53	; 83
     12a:	78 58       	subi	r23, 0x88	; 136
     12c:	5b 00       	.word	0x005b	; ????

0000012e <__ctors_end>:
     12e:	11 24       	eor	r1, r1
     130:	1f be       	out	0x3f, r1	; 63
     132:	cf ef       	ldi	r28, 0xFF	; 255
     134:	d8 e0       	ldi	r29, 0x08	; 8
     136:	de bf       	out	0x3e, r29	; 62
     138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
     13a:	13 e0       	ldi	r17, 0x03	; 3
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b1 e0       	ldi	r27, 0x01	; 1
     140:	e2 e3       	ldi	r30, 0x32	; 50
     142:	fd e1       	ldi	r31, 0x1D	; 29
     144:	02 c0       	rjmp	.+4      	; 0x14a <__do_copy_data+0x10>
     146:	05 90       	lpm	r0, Z+
     148:	0d 92       	st	X+, r0
     14a:	ac 3d       	cpi	r26, 0xDC	; 220
     14c:	b1 07       	cpc	r27, r17
     14e:	d9 f7       	brne	.-10     	; 0x146 <__do_copy_data+0xc>

00000150 <__do_clear_bss>:
     150:	25 e0       	ldi	r18, 0x05	; 5
     152:	ac ed       	ldi	r26, 0xDC	; 220
     154:	b3 e0       	ldi	r27, 0x03	; 3
     156:	01 c0       	rjmp	.+2      	; 0x15a <.do_clear_bss_start>

00000158 <.do_clear_bss_loop>:
     158:	1d 92       	st	X+, r1

0000015a <.do_clear_bss_start>:
     15a:	a0 3b       	cpi	r26, 0xB0	; 176
     15c:	b2 07       	cpc	r27, r18
     15e:	e1 f7       	brne	.-8      	; 0x158 <.do_clear_bss_loop>
     160:	0e 94 25 05 	call	0xa4a	; 0xa4a <main>
     164:	0c 94 97 0e 	jmp	0x1d2e	; 0x1d2e <_exit>

00000168 <__bad_interrupt>:
     168:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000016c <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
	system_init();
     16c:	0e 94 dd 05 	call	0xbba	; 0xbba <system_init>
     170:	08 95       	ret

00000172 <help>:
	spirit_status_view();
	
}

void spirit_command_lock(void)
{
     172:	ef 92       	push	r14
     174:	ff 92       	push	r15
     176:	0f 93       	push	r16
     178:	1f 93       	push	r17
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	8e e0       	ldi	r24, 0x0E	; 14
     180:	91 e0       	ldi	r25, 0x01	; 1
     182:	9f 93       	push	r25
     184:	8f 93       	push	r24
     186:	0e 94 c1 08 	call	0x1182	; 0x1182 <printf>
     18a:	0f 90       	pop	r0
     18c:	0f 90       	pop	r0
     18e:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <commands+0x10>
     192:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <commands+0x11>
     196:	89 2b       	or	r24, r25
     198:	a1 f4       	brne	.+40     	; 0x1c2 <help+0x50>
     19a:	2c c0       	rjmp	.+88     	; 0x1f4 <help+0x82>
     19c:	88 89       	ldd	r24, Y+16	; 0x10
     19e:	99 89       	ldd	r25, Y+17	; 0x11
     1a0:	89 2b       	or	r24, r25
     1a2:	41 f1       	breq	.+80     	; 0x1f4 <help+0x82>
     1a4:	df 93       	push	r29
     1a6:	cf 93       	push	r28
     1a8:	1f 93       	push	r17
     1aa:	0f 93       	push	r16
     1ac:	0e 94 c1 08 	call	0x1182	; 0x1182 <printf>
     1b0:	62 96       	adiw	r28, 0x12	; 18
     1b2:	0f 90       	pop	r0
     1b4:	0f 90       	pop	r0
     1b6:	0f 90       	pop	r0
     1b8:	0f 90       	pop	r0
     1ba:	ce 15       	cp	r28, r14
     1bc:	df 05       	cpc	r29, r15
     1be:	71 f7       	brne	.-36     	; 0x19c <help+0x2a>
     1c0:	19 c0       	rjmp	.+50     	; 0x1f4 <help+0x82>
     1c2:	82 e4       	ldi	r24, 0x42	; 66
     1c4:	94 e0       	ldi	r25, 0x04	; 4
     1c6:	9f 93       	push	r25
     1c8:	8f 93       	push	r24
     1ca:	8f e1       	ldi	r24, 0x1F	; 31
     1cc:	91 e0       	ldi	r25, 0x01	; 1
     1ce:	9f 93       	push	r25
     1d0:	8f 93       	push	r24
     1d2:	0e 94 c1 08 	call	0x1182	; 0x1182 <printf>
     1d6:	c4 e5       	ldi	r28, 0x54	; 84
     1d8:	d4 e0       	ldi	r29, 0x04	; 4
     1da:	0f 2e       	mov	r0, r31
     1dc:	fa ea       	ldi	r31, 0xAA	; 170
     1de:	ef 2e       	mov	r14, r31
     1e0:	f5 e0       	ldi	r31, 0x05	; 5
     1e2:	ff 2e       	mov	r15, r31
     1e4:	f0 2d       	mov	r31, r0
     1e6:	0f 90       	pop	r0
     1e8:	0f 90       	pop	r0
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	0f e1       	ldi	r16, 0x1F	; 31
     1f0:	11 e0       	ldi	r17, 0x01	; 1
     1f2:	d4 cf       	rjmp	.-88     	; 0x19c <help+0x2a>
     1f4:	df 91       	pop	r29
     1f6:	cf 91       	pop	r28
     1f8:	1f 91       	pop	r17
     1fa:	0f 91       	pop	r16
     1fc:	ff 90       	pop	r15
     1fe:	ef 90       	pop	r14
     200:	08 95       	ret

00000202 <spirit_reg_read>:
     202:	0f 93       	push	r16
     204:	1f 93       	push	r17
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
     20a:	00 d0       	rcall	.+0      	; 0x20c <spirit_reg_read+0xa>
     20c:	cd b7       	in	r28, 0x3d	; 61
     20e:	de b7       	in	r29, 0x3e	; 62
     210:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <cmdargs>
     214:	90 91 2f 04 	lds	r25, 0x042F	; 0x80042f <cmdargs+0x1>
     218:	00 97       	sbiw	r24, 0x00	; 0
     21a:	49 f4       	brne	.+18     	; 0x22e <spirit_reg_read+0x2c>
     21c:	84 e2       	ldi	r24, 0x24	; 36
     21e:	91 e0       	ldi	r25, 0x01	; 1
     220:	9f 93       	push	r25
     222:	8f 93       	push	r24
     224:	0e 94 c1 08 	call	0x1182	; 0x1182 <printf>
     228:	0f 90       	pop	r0
     22a:	0f 90       	pop	r0
     22c:	1d c0       	rjmp	.+58     	; 0x268 <spirit_reg_read+0x66>
     22e:	0e 94 23 08 	call	0x1046	; 0x1046 <atoi>
     232:	8c 01       	movw	r16, r24
     234:	ae 01       	movw	r20, r28
     236:	4f 5f       	subi	r20, 0xFF	; 255
     238:	5f 4f       	sbci	r21, 0xFF	; 255
     23a:	62 e0       	ldi	r22, 0x02	; 2
     23c:	0e 94 67 05 	call	0xace	; 0xace <SdkEvalSpiReadRegisters>
     240:	8a 81       	ldd	r24, Y+2	; 0x02
     242:	1f 92       	push	r1
     244:	8f 93       	push	r24
     246:	89 81       	ldd	r24, Y+1	; 0x01
     248:	1f 92       	push	r1
     24a:	8f 93       	push	r24
     24c:	11 27       	eor	r17, r17
     24e:	1f 93       	push	r17
     250:	0f 93       	push	r16
     252:	81 e4       	ldi	r24, 0x41	; 65
     254:	91 e0       	ldi	r25, 0x01	; 1
     256:	9f 93       	push	r25
     258:	8f 93       	push	r24
     25a:	0e 94 c1 08 	call	0x1182	; 0x1182 <printf>
     25e:	0f b6       	in	r0, 0x3f	; 63
     260:	f8 94       	cli
     262:	de bf       	out	0x3e, r29	; 62
     264:	0f be       	out	0x3f, r0	; 63
     266:	cd bf       	out	0x3d, r28	; 61
     268:	0f 90       	pop	r0
     26a:	0f 90       	pop	r0
     26c:	df 91       	pop	r29
     26e:	cf 91       	pop	r28
     270:	1f 91       	pop	r17
     272:	0f 91       	pop	r16
     274:	08 95       	ret

00000276 <spirit_reg_write>:
     276:	1f 93       	push	r17
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
     27c:	00 d0       	rcall	.+0      	; 0x27e <spirit_reg_write+0x8>
     27e:	00 d0       	rcall	.+0      	; 0x280 <spirit_reg_write+0xa>
     280:	cd b7       	in	r28, 0x3d	; 61
     282:	de b7       	in	r29, 0x3e	; 62
     284:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <cmdargs>
     288:	90 91 2f 04 	lds	r25, 0x042F	; 0x80042f <cmdargs+0x1>
     28c:	00 97       	sbiw	r24, 0x00	; 0
     28e:	49 f4       	brne	.+18     	; 0x2a2 <spirit_reg_write+0x2c>
     290:	84 e2       	ldi	r24, 0x24	; 36
     292:	91 e0       	ldi	r25, 0x01	; 1
     294:	9f 93       	push	r25
     296:	8f 93       	push	r24
     298:	0e 94 c1 08 	call	0x1182	; 0x1182 <printf>
     29c:	0f 90       	pop	r0
     29e:	0f 90       	pop	r0
     2a0:	30 c0       	rjmp	.+96     	; 0x302 <spirit_reg_write+0x8c>
     2a2:	0e 94 23 08 	call	0x1046	; 0x1046 <atoi>
     2a6:	18 2f       	mov	r17, r24
     2a8:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <cmdargs+0x2>
     2ac:	90 91 31 04 	lds	r25, 0x0431	; 0x800431 <cmdargs+0x3>
     2b0:	00 97       	sbiw	r24, 0x00	; 0
     2b2:	49 f4       	brne	.+18     	; 0x2c6 <spirit_reg_write+0x50>
     2b4:	84 e2       	ldi	r24, 0x24	; 36
     2b6:	91 e0       	ldi	r25, 0x01	; 1
     2b8:	9f 93       	push	r25
     2ba:	8f 93       	push	r24
     2bc:	0e 94 c1 08 	call	0x1182	; 0x1182 <printf>
     2c0:	0f 90       	pop	r0
     2c2:	0f 90       	pop	r0
     2c4:	1e c0       	rjmp	.+60     	; 0x302 <spirit_reg_write+0x8c>
     2c6:	9e 01       	movw	r18, r28
     2c8:	2f 5f       	subi	r18, 0xFF	; 255
     2ca:	3f 4f       	sbci	r19, 0xFF	; 255
     2cc:	3f 93       	push	r19
     2ce:	2f 93       	push	r18
     2d0:	28 e6       	ldi	r18, 0x68	; 104
     2d2:	31 e0       	ldi	r19, 0x01	; 1
     2d4:	3f 93       	push	r19
     2d6:	2f 93       	push	r18
     2d8:	9f 93       	push	r25
     2da:	8f 93       	push	r24
     2dc:	0e 94 d7 08 	call	0x11ae	; 0x11ae <sscanf>
     2e0:	89 81       	ldd	r24, Y+1	; 0x01
     2e2:	9a 81       	ldd	r25, Y+2	; 0x02
     2e4:	9b 83       	std	Y+3, r25	; 0x03
     2e6:	8c 83       	std	Y+4, r24	; 0x04
     2e8:	ae 01       	movw	r20, r28
     2ea:	4d 5f       	subi	r20, 0xFD	; 253
     2ec:	5f 4f       	sbci	r21, 0xFF	; 255
     2ee:	62 e0       	ldi	r22, 0x02	; 2
     2f0:	81 2f       	mov	r24, r17
     2f2:	0e 94 94 05 	call	0xb28	; 0xb28 <SdkEvalSpiWriteRegisters>
     2f6:	0f 90       	pop	r0
     2f8:	0f 90       	pop	r0
     2fa:	0f 90       	pop	r0
     2fc:	0f 90       	pop	r0
     2fe:	0f 90       	pop	r0
     300:	0f 90       	pop	r0
     302:	0f 90       	pop	r0
     304:	0f 90       	pop	r0
     306:	0f 90       	pop	r0
     308:	0f 90       	pop	r0
     30a:	df 91       	pop	r29
     30c:	cf 91       	pop	r28
     30e:	1f 91       	pop	r17
     310:	08 95       	ret

00000312 <spirit_cmd_write>:
     312:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <cmdargs>
     316:	90 91 2f 04 	lds	r25, 0x042F	; 0x80042f <cmdargs+0x1>
     31a:	00 97       	sbiw	r24, 0x00	; 0
     31c:	49 f4       	brne	.+18     	; 0x330 <spirit_cmd_write+0x1e>
     31e:	84 e2       	ldi	r24, 0x24	; 36
     320:	91 e0       	ldi	r25, 0x01	; 1
     322:	9f 93       	push	r25
     324:	8f 93       	push	r24
     326:	0e 94 c1 08 	call	0x1182	; 0x1182 <printf>
     32a:	0f 90       	pop	r0
     32c:	0f 90       	pop	r0
     32e:	08 95       	ret
     330:	0e 94 23 08 	call	0x1046	; 0x1046 <atoi>
     334:	0e 94 c0 05 	call	0xb80	; 0xb80 <SdkEvalSpiCommandStrobes>
     338:	08 95       	ret

0000033a <spirit_status_view>:
     33a:	cf 92       	push	r12
     33c:	df 92       	push	r13
     33e:	ef 92       	push	r14
     340:	ff 92       	push	r15
     342:	0f 93       	push	r16
     344:	1f 93       	push	r17
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	00 d0       	rcall	.+0      	; 0x34c <spirit_status_view+0x12>
     34c:	cd b7       	in	r28, 0x3d	; 61
     34e:	de b7       	in	r29, 0x3e	; 62
     350:	ae 01       	movw	r20, r28
     352:	4f 5f       	subi	r20, 0xFF	; 255
     354:	5f 4f       	sbci	r21, 0xFF	; 255
     356:	62 e0       	ldi	r22, 0x02	; 2
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	0e 94 67 05 	call	0xace	; 0xace <SdkEvalSpiReadRegisters>
     35e:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <g_xStatus+0x1>
     362:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <g_xStatus>
     366:	0f 2e       	mov	r0, r31
     368:	fc ee       	ldi	r31, 0xEC	; 236
     36a:	ef 2e       	mov	r14, r31
     36c:	f3 e0       	ldi	r31, 0x03	; 3
     36e:	ff 2e       	mov	r15, r31
     370:	f0 2d       	mov	r31, r0
     372:	f7 01       	movw	r30, r14
     374:	00 81       	ld	r16, Z
     376:	11 81       	ldd	r17, Z+1	; 0x01
     378:	1f 93       	push	r17
     37a:	0f 93       	push	r16
     37c:	8d e6       	ldi	r24, 0x6D	; 109
     37e:	91 e0       	ldi	r25, 0x01	; 1
     380:	9f 93       	push	r25
     382:	8f 93       	push	r24
     384:	0e 94 c1 08 	call	0x1182	; 0x1182 <printf>
     388:	0f 2e       	mov	r0, r31
     38a:	fd ee       	ldi	r31, 0xED	; 237
     38c:	cf 2e       	mov	r12, r31
     38e:	f3 e0       	ldi	r31, 0x03	; 3
     390:	df 2e       	mov	r13, r31
     392:	f0 2d       	mov	r31, r0
     394:	f6 01       	movw	r30, r12
     396:	80 81       	ld	r24, Z
     398:	83 fb       	bst	r24, 3
     39a:	88 27       	eor	r24, r24
     39c:	80 f9       	bld	r24, 0
     39e:	1f 92       	push	r1
     3a0:	8f 93       	push	r24
     3a2:	84 e8       	ldi	r24, 0x84	; 132
     3a4:	91 e0       	ldi	r25, 0x01	; 1
     3a6:	9f 93       	push	r25
     3a8:	8f 93       	push	r24
     3aa:	0e 94 c1 08 	call	0x1182	; 0x1182 <printf>
     3ae:	f6 01       	movw	r30, r12
     3b0:	80 81       	ld	r24, Z
     3b2:	81 70       	andi	r24, 0x01	; 1
     3b4:	1f 92       	push	r1
     3b6:	8f 93       	push	r24
     3b8:	81 ea       	ldi	r24, 0xA1	; 161
     3ba:	91 e0       	ldi	r25, 0x01	; 1
     3bc:	9f 93       	push	r25
     3be:	8f 93       	push	r24
     3c0:	0e 94 c1 08 	call	0x1182	; 0x1182 <printf>
     3c4:	f7 01       	movw	r30, r14
     3c6:	80 81       	ld	r24, Z
     3c8:	86 95       	lsr	r24
     3ca:	1f 92       	push	r1
     3cc:	8f 93       	push	r24
     3ce:	8e eb       	ldi	r24, 0xBE	; 190
     3d0:	91 e0       	ldi	r25, 0x01	; 1
     3d2:	9f 93       	push	r25
     3d4:	8f 93       	push	r24
     3d6:	0e 94 c1 08 	call	0x1182	; 0x1182 <printf>
     3da:	0f b6       	in	r0, 0x3f	; 63
     3dc:	f8 94       	cli
     3de:	de bf       	out	0x3e, r29	; 62
     3e0:	0f be       	out	0x3f, r0	; 63
     3e2:	cd bf       	out	0x3d, r28	; 61
     3e4:	f8 01       	movw	r30, r16
     3e6:	ff 27       	eor	r31, r31
     3e8:	f6 95       	lsr	r31
     3ea:	e7 95       	ror	r30
     3ec:	33 97       	sbiw	r30, 0x03	; 3
     3ee:	ed 35       	cpi	r30, 0x5D	; 93
     3f0:	f1 05       	cpc	r31, r1
     3f2:	08 f0       	brcs	.+2      	; 0x3f6 <spirit_status_view+0xbc>
     3f4:	70 c0       	rjmp	.+224    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     3f6:	ec 5c       	subi	r30, 0xCC	; 204
     3f8:	ff 4f       	sbci	r31, 0xFF	; 255
     3fa:	0c 94 1d 08 	jmp	0x103a	; 0x103a <__tablejump2__>
     3fe:	89 ed       	ldi	r24, 0xD9	; 217
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	9f 93       	push	r25
     404:	8f 93       	push	r24
     406:	0e 94 c1 08 	call	0x1182	; 0x1182 <printf>
     40a:	0f 90       	pop	r0
     40c:	0f 90       	pop	r0
     40e:	6b c0       	rjmp	.+214    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     410:	83 ee       	ldi	r24, 0xE3	; 227
     412:	91 e0       	ldi	r25, 0x01	; 1
     414:	9f 93       	push	r25
     416:	8f 93       	push	r24
     418:	0e 94 c1 08 	call	0x1182	; 0x1182 <printf>
     41c:	0f 90       	pop	r0
     41e:	0f 90       	pop	r0
     420:	62 c0       	rjmp	.+196    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     422:	8d ee       	ldi	r24, 0xED	; 237
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	9f 93       	push	r25
     428:	8f 93       	push	r24
     42a:	0e 94 c1 08 	call	0x1182	; 0x1182 <printf>
     42e:	0f 90       	pop	r0
     430:	0f 90       	pop	r0
     432:	59 c0       	rjmp	.+178    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     434:	85 ef       	ldi	r24, 0xF5	; 245
     436:	91 e0       	ldi	r25, 0x01	; 1
     438:	9f 93       	push	r25
     43a:	8f 93       	push	r24
     43c:	0e 94 c1 08 	call	0x1182	; 0x1182 <printf>
     440:	0f 90       	pop	r0
     442:	0f 90       	pop	r0
     444:	50 c0       	rjmp	.+160    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	92 e0       	ldi	r25, 0x02	; 2
     44a:	9f 93       	push	r25
     44c:	8f 93       	push	r24
     44e:	0e 94 c1 08 	call	0x1182	; 0x1182 <printf>
     452:	0f 90       	pop	r0
     454:	0f 90       	pop	r0
     456:	47 c0       	rjmp	.+142    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     458:	87 e0       	ldi	r24, 0x07	; 7
     45a:	92 e0       	ldi	r25, 0x02	; 2
     45c:	9f 93       	push	r25
     45e:	8f 93       	push	r24
     460:	0e 94 c1 08 	call	0x1182	; 0x1182 <printf>
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
     468:	3e c0       	rjmp	.+124    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     46a:	85 e1       	ldi	r24, 0x15	; 21
     46c:	92 e0       	ldi	r25, 0x02	; 2
     46e:	9f 93       	push	r25
     470:	8f 93       	push	r24
     472:	0e 94 c1 08 	call	0x1182	; 0x1182 <printf>
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	35 c0       	rjmp	.+106    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     47c:	8a e1       	ldi	r24, 0x1A	; 26
     47e:	92 e0       	ldi	r25, 0x02	; 2
     480:	9f 93       	push	r25
     482:	8f 93       	push	r24
     484:	0e 94 c1 08 	call	0x1182	; 0x1182 <printf>
     488:	0f 90       	pop	r0
     48a:	0f 90       	pop	r0
     48c:	2c c0       	rjmp	.+88     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     48e:	82 e2       	ldi	r24, 0x22	; 34
     490:	92 e0       	ldi	r25, 0x02	; 2
     492:	9f 93       	push	r25
     494:	8f 93       	push	r24
     496:	0e 94 c1 08 	call	0x1182	; 0x1182 <printf>
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	23 c0       	rjmp	.+70     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     4a0:	8d e2       	ldi	r24, 0x2D	; 45
     4a2:	92 e0       	ldi	r25, 0x02	; 2
     4a4:	9f 93       	push	r25
     4a6:	8f 93       	push	r24
     4a8:	0e 94 c1 08 	call	0x1182	; 0x1182 <printf>
     4ac:	0f 90       	pop	r0
     4ae:	0f 90       	pop	r0
     4b0:	1a c0       	rjmp	.+52     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     4b2:	85 e3       	ldi	r24, 0x35	; 53
     4b4:	92 e0       	ldi	r25, 0x02	; 2
     4b6:	9f 93       	push	r25
     4b8:	8f 93       	push	r24
     4ba:	0e 94 c1 08 	call	0x1182	; 0x1182 <printf>
     4be:	0f 90       	pop	r0
     4c0:	0f 90       	pop	r0
     4c2:	11 c0       	rjmp	.+34     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     4c4:	82 e4       	ldi	r24, 0x42	; 66
     4c6:	92 e0       	ldi	r25, 0x02	; 2
     4c8:	9f 93       	push	r25
     4ca:	8f 93       	push	r24
     4cc:	0e 94 c1 08 	call	0x1182	; 0x1182 <printf>
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	08 c0       	rjmp	.+16     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     4d6:	87 e4       	ldi	r24, 0x47	; 71
     4d8:	92 e0       	ldi	r25, 0x02	; 2
     4da:	9f 93       	push	r25
     4dc:	8f 93       	push	r24
     4de:	0e 94 c1 08 	call	0x1182	; 0x1182 <printf>
     4e2:	0f 90       	pop	r0
     4e4:	0f 90       	pop	r0
     4e6:	0d ee       	ldi	r16, 0xED	; 237
     4e8:	13 e0       	ldi	r17, 0x03	; 3
     4ea:	f8 01       	movw	r30, r16
     4ec:	80 81       	ld	r24, Z
     4ee:	86 95       	lsr	r24
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	1f 92       	push	r1
     4f4:	8f 93       	push	r24
     4f6:	81 e5       	ldi	r24, 0x51	; 81
     4f8:	92 e0       	ldi	r25, 0x02	; 2
     4fa:	9f 93       	push	r25
     4fc:	8f 93       	push	r24
     4fe:	0e 94 c1 08 	call	0x1182	; 0x1182 <printf>
     502:	f8 01       	movw	r30, r16
     504:	80 81       	ld	r24, Z
     506:	82 fb       	bst	r24, 2
     508:	88 27       	eor	r24, r24
     50a:	80 f9       	bld	r24, 0
     50c:	1f 92       	push	r1
     50e:	8f 93       	push	r24
     510:	81 e7       	ldi	r24, 0x71	; 113
     512:	92 e0       	ldi	r25, 0x02	; 2
     514:	9f 93       	push	r25
     516:	8f 93       	push	r24
     518:	0e 94 c1 08 	call	0x1182	; 0x1182 <printf>
     51c:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <g_xStatus>
     520:	81 70       	andi	r24, 0x01	; 1
     522:	1f 92       	push	r1
     524:	8f 93       	push	r24
     526:	80 e9       	ldi	r24, 0x90	; 144
     528:	92 e0       	ldi	r25, 0x02	; 2
     52a:	9f 93       	push	r25
     52c:	8f 93       	push	r24
     52e:	0e 94 c1 08 	call	0x1182	; 0x1182 <printf>
     532:	0f b6       	in	r0, 0x3f	; 63
     534:	f8 94       	cli
     536:	de bf       	out	0x3e, r29	; 62
     538:	0f be       	out	0x3f, r0	; 63
     53a:	cd bf       	out	0x3d, r28	; 61
     53c:	0f 90       	pop	r0
     53e:	0f 90       	pop	r0
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	1f 91       	pop	r17
     546:	0f 91       	pop	r16
     548:	ff 90       	pop	r15
     54a:	ef 90       	pop	r14
     54c:	df 90       	pop	r13
     54e:	cf 90       	pop	r12
     550:	08 95       	ret

00000552 <spirit_command_ready>:
     552:	0f 93       	push	r16
     554:	1f 93       	push	r17
     556:	cf 93       	push	r28
     558:	df 93       	push	r29
     55a:	1f 92       	push	r1
     55c:	cd b7       	in	r28, 0x3d	; 61
     55e:	de b7       	in	r29, 0x3e	; 62
     560:	82 e6       	ldi	r24, 0x62	; 98
     562:	0e 94 c0 05 	call	0xb80	; 0xb80 <SdkEvalSpiCommandStrobes>
     566:	ae 01       	movw	r20, r28
     568:	4f 5f       	subi	r20, 0xFF	; 255
     56a:	5f 4f       	sbci	r21, 0xFF	; 255
     56c:	61 e0       	ldi	r22, 0x01	; 1
     56e:	81 ec       	ldi	r24, 0xC1	; 193
     570:	0e 94 67 05 	call	0xace	; 0xace <SdkEvalSpiReadRegisters>
     574:	0f ef       	ldi	r16, 0xFF	; 255
     576:	1f ee       	ldi	r17, 0xEF	; 239
     578:	13 c0       	rjmp	.+38     	; 0x5a0 <spirit_command_ready+0x4e>
     57a:	ae 01       	movw	r20, r28
     57c:	4f 5f       	subi	r20, 0xFF	; 255
     57e:	5f 4f       	sbci	r21, 0xFF	; 255
     580:	61 e0       	ldi	r22, 0x01	; 1
     582:	81 ec       	ldi	r24, 0xC1	; 193
     584:	0e 94 67 05 	call	0xace	; 0xace <SdkEvalSpiReadRegisters>
     588:	01 50       	subi	r16, 0x01	; 1
     58a:	11 09       	sbc	r17, r1
     58c:	49 f4       	brne	.+18     	; 0x5a0 <spirit_command_ready+0x4e>
     58e:	88 ea       	ldi	r24, 0xA8	; 168
     590:	92 e0       	ldi	r25, 0x02	; 2
     592:	9f 93       	push	r25
     594:	8f 93       	push	r24
     596:	0e 94 c1 08 	call	0x1182	; 0x1182 <printf>
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
     59e:	06 c0       	rjmp	.+12     	; 0x5ac <spirit_command_ready+0x5a>
     5a0:	89 81       	ldd	r24, Y+1	; 0x01
     5a2:	8e 7f       	andi	r24, 0xFE	; 254
     5a4:	86 30       	cpi	r24, 0x06	; 6
     5a6:	49 f7       	brne	.-46     	; 0x57a <spirit_command_ready+0x28>
     5a8:	0e 94 9d 01 	call	0x33a	; 0x33a <spirit_status_view>
     5ac:	0f 90       	pop	r0
     5ae:	df 91       	pop	r29
     5b0:	cf 91       	pop	r28
     5b2:	1f 91       	pop	r17
     5b4:	0f 91       	pop	r16
     5b6:	08 95       	ret

000005b8 <spirit_command_standby>:
     5b8:	83 e6       	ldi	r24, 0x63	; 99
     5ba:	0e 94 c0 05 	call	0xb80	; 0xb80 <SdkEvalSpiCommandStrobes>
     5be:	0e 94 9d 01 	call	0x33a	; 0x33a <spirit_status_view>
     5c2:	08 95       	ret

000005c4 <spirit_command_lock_tx>:
     5c4:	0f 93       	push	r16
     5c6:	1f 93       	push	r17
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
     5cc:	1f 92       	push	r1
     5ce:	cd b7       	in	r28, 0x3d	; 61
     5d0:	de b7       	in	r29, 0x3e	; 62
     5d2:	86 e6       	ldi	r24, 0x66	; 102
     5d4:	0e 94 c0 05 	call	0xb80	; 0xb80 <SdkEvalSpiCommandStrobes>
     5d8:	ae 01       	movw	r20, r28
     5da:	4f 5f       	subi	r20, 0xFF	; 255
     5dc:	5f 4f       	sbci	r21, 0xFF	; 255
     5de:	61 e0       	ldi	r22, 0x01	; 1
     5e0:	81 ec       	ldi	r24, 0xC1	; 193
     5e2:	0e 94 67 05 	call	0xace	; 0xace <SdkEvalSpiReadRegisters>
     5e6:	0f ef       	ldi	r16, 0xFF	; 255
     5e8:	1f ee       	ldi	r17, 0xEF	; 239
     5ea:	13 c0       	rjmp	.+38     	; 0x612 <spirit_command_lock_tx+0x4e>
     5ec:	ae 01       	movw	r20, r28
     5ee:	4f 5f       	subi	r20, 0xFF	; 255
     5f0:	5f 4f       	sbci	r21, 0xFF	; 255
     5f2:	61 e0       	ldi	r22, 0x01	; 1
     5f4:	81 ec       	ldi	r24, 0xC1	; 193
     5f6:	0e 94 67 05 	call	0xace	; 0xace <SdkEvalSpiReadRegisters>
     5fa:	01 50       	subi	r16, 0x01	; 1
     5fc:	11 09       	sbc	r17, r1
     5fe:	49 f4       	brne	.+18     	; 0x612 <spirit_command_lock_tx+0x4e>
     600:	88 ea       	ldi	r24, 0xA8	; 168
     602:	92 e0       	ldi	r25, 0x02	; 2
     604:	9f 93       	push	r25
     606:	8f 93       	push	r24
     608:	0e 94 c1 08 	call	0x1182	; 0x1182 <printf>
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
     610:	06 c0       	rjmp	.+12     	; 0x61e <spirit_command_lock_tx+0x5a>
     612:	89 81       	ldd	r24, Y+1	; 0x01
     614:	8e 7f       	andi	r24, 0xFE	; 254
     616:	8e 31       	cpi	r24, 0x1E	; 30
     618:	49 f7       	brne	.-46     	; 0x5ec <spirit_command_lock_tx+0x28>
     61a:	0e 94 9d 01 	call	0x33a	; 0x33a <spirit_status_view>
     61e:	0f 90       	pop	r0
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	1f 91       	pop	r17
     626:	0f 91       	pop	r16
     628:	08 95       	ret

0000062a <spirit_command_lock_rx>:
     62a:	0f 93       	push	r16
     62c:	1f 93       	push	r17
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	1f 92       	push	r1
     634:	cd b7       	in	r28, 0x3d	; 61
     636:	de b7       	in	r29, 0x3e	; 62
     638:	85 e6       	ldi	r24, 0x65	; 101
     63a:	0e 94 c0 05 	call	0xb80	; 0xb80 <SdkEvalSpiCommandStrobes>
     63e:	ae 01       	movw	r20, r28
     640:	4f 5f       	subi	r20, 0xFF	; 255
     642:	5f 4f       	sbci	r21, 0xFF	; 255
     644:	61 e0       	ldi	r22, 0x01	; 1
     646:	81 ec       	ldi	r24, 0xC1	; 193
     648:	0e 94 67 05 	call	0xace	; 0xace <SdkEvalSpiReadRegisters>
     64c:	0f ef       	ldi	r16, 0xFF	; 255
     64e:	1f ee       	ldi	r17, 0xEF	; 239
     650:	13 c0       	rjmp	.+38     	; 0x678 <spirit_command_lock_rx+0x4e>
     652:	ae 01       	movw	r20, r28
     654:	4f 5f       	subi	r20, 0xFF	; 255
     656:	5f 4f       	sbci	r21, 0xFF	; 255
     658:	61 e0       	ldi	r22, 0x01	; 1
     65a:	81 ec       	ldi	r24, 0xC1	; 193
     65c:	0e 94 67 05 	call	0xace	; 0xace <SdkEvalSpiReadRegisters>
     660:	01 50       	subi	r16, 0x01	; 1
     662:	11 09       	sbc	r17, r1
     664:	49 f4       	brne	.+18     	; 0x678 <spirit_command_lock_rx+0x4e>
     666:	88 ea       	ldi	r24, 0xA8	; 168
     668:	92 e0       	ldi	r25, 0x02	; 2
     66a:	9f 93       	push	r25
     66c:	8f 93       	push	r24
     66e:	0e 94 c1 08 	call	0x1182	; 0x1182 <printf>
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
     676:	06 c0       	rjmp	.+12     	; 0x684 <spirit_command_lock_rx+0x5a>
     678:	89 81       	ldd	r24, Y+1	; 0x01
     67a:	8e 7f       	andi	r24, 0xFE	; 254
     67c:	8e 31       	cpi	r24, 0x1E	; 30
     67e:	49 f7       	brne	.-46     	; 0x652 <spirit_command_lock_rx+0x28>
     680:	0e 94 9d 01 	call	0x33a	; 0x33a <spirit_status_view>
     684:	0f 90       	pop	r0
     686:	df 91       	pop	r29
     688:	cf 91       	pop	r28
     68a:	1f 91       	pop	r17
     68c:	0f 91       	pop	r16
     68e:	08 95       	ret

00000690 <spirit_command_sleep>:
     690:	84 e6       	ldi	r24, 0x64	; 100
     692:	0e 94 c0 05 	call	0xb80	; 0xb80 <SdkEvalSpiCommandStrobes>
     696:	0e 94 9d 01 	call	0x33a	; 0x33a <spirit_status_view>
     69a:	08 95       	ret

0000069c <spirit_command_disable>:
}

void spirit_command_disable(void)
{
	
	PORTC|= (1<<5);
     69c:	45 9a       	sbi	0x08, 5	; 8
     69e:	08 95       	ret

000006a0 <spirit_command_enable>:
}

void spirit_command_enable(void)
{
	
	PORTC&=~(1<<5);
     6a0:	45 98       	cbi	0x08, 5	; 8
     6a2:	08 95       	ret

000006a4 <spirit_command_reset>:


void spirit_command_reset(void)
{
	
	SpiritSpiCommandStrobes(COMMAND_SRES);
     6a4:	80 e7       	ldi	r24, 0x70	; 112
     6a6:	0e 94 c0 05 	call	0xb80	; 0xb80 <SdkEvalSpiCommandStrobes>
	spirit_status_view();
     6aa:	0e 94 9d 01 	call	0x33a	; 0x33a <spirit_status_view>
     6ae:	08 95       	ret

000006b0 <SpiritBaseConfiguration>:


/* This is the function that initializes the SPIRIT with the configuration 
that the user has exported using the GUI */
void SpiritBaseConfiguration(void)
{
     6b0:	1f 93       	push	r17
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
     6b6:	00 d0       	rcall	.+0      	; 0x6b8 <SpiritBaseConfiguration+0x8>
     6b8:	00 d0       	rcall	.+0      	; 0x6ba <SpiritBaseConfiguration+0xa>
     6ba:	00 d0       	rcall	.+0      	; 0x6bc <SpiritBaseConfiguration+0xc>
     6bc:	cd b7       	in	r28, 0x3d	; 61
     6be:	de b7       	in	r29, 0x3e	; 62
  uint8_t tmp[6];

  /* Be sure that the registers config is default */
  SpiritSpiCommandStrobes(COMMAND_SRES);
     6c0:	80 e7       	ldi	r24, 0x70	; 112
     6c2:	0e 94 c0 05 	call	0xb80	; 0xb80 <SdkEvalSpiCommandStrobes>
  /* Extra current in after power on fix.
     In some samples, when a supply voltage below 2.6 V is applied to SPIRIT1 from a no power condition,
     an extra current is added to the typical current consumption.
     With this sequence, the extra current is erased.
  */
  tmp[0]=0xCA;SpiritSpiWriteRegisters(0xB2, 1, tmp); 
     6c6:	8a ec       	ldi	r24, 0xCA	; 202
     6c8:	89 83       	std	Y+1, r24	; 0x01
     6ca:	ae 01       	movw	r20, r28
     6cc:	4f 5f       	subi	r20, 0xFF	; 255
     6ce:	5f 4f       	sbci	r21, 0xFF	; 255
     6d0:	61 e0       	ldi	r22, 0x01	; 1
     6d2:	82 eb       	ldi	r24, 0xB2	; 178
     6d4:	0e 94 94 05 	call	0xb28	; 0xb28 <SdkEvalSpiWriteRegisters>
  tmp[0]=0x04;SpiritSpiWriteRegisters(0xA8, 1, tmp); 
     6d8:	84 e0       	ldi	r24, 0x04	; 4
     6da:	89 83       	std	Y+1, r24	; 0x01
     6dc:	ae 01       	movw	r20, r28
     6de:	4f 5f       	subi	r20, 0xFF	; 255
     6e0:	5f 4f       	sbci	r21, 0xFF	; 255
     6e2:	61 e0       	ldi	r22, 0x01	; 1
     6e4:	88 ea       	ldi	r24, 0xA8	; 168
     6e6:	0e 94 94 05 	call	0xb28	; 0xb28 <SdkEvalSpiWriteRegisters>
  SpiritSpiReadRegisters(0xA8, 1, tmp);
     6ea:	ae 01       	movw	r20, r28
     6ec:	4f 5f       	subi	r20, 0xFF	; 255
     6ee:	5f 4f       	sbci	r21, 0xFF	; 255
     6f0:	61 e0       	ldi	r22, 0x01	; 1
     6f2:	88 ea       	ldi	r24, 0xA8	; 168
     6f4:	0e 94 67 05 	call	0xace	; 0xace <SdkEvalSpiReadRegisters>
  tmp[0]=0x00;SpiritSpiWriteRegisters(0xA8, 1, tmp);
     6f8:	19 82       	std	Y+1, r1	; 0x01
     6fa:	ae 01       	movw	r20, r28
     6fc:	4f 5f       	subi	r20, 0xFF	; 255
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	61 e0       	ldi	r22, 0x01	; 1
     702:	88 ea       	ldi	r24, 0xA8	; 168
     704:	0e 94 94 05 	call	0xb28	; 0xb28 <SdkEvalSpiWriteRegisters>

  tmp[0] = 0x31; /* reg. IF_OFFSET_ANA (0x07) */
     708:	81 e3       	ldi	r24, 0x31	; 49
     70a:	89 83       	std	Y+1, r24	; 0x01
  tmp[1] = 0x06; /* reg. SYNT3 (0x08) */
     70c:	86 e0       	ldi	r24, 0x06	; 6
     70e:	8a 83       	std	Y+2, r24	; 0x02
  tmp[2] = 0x42; /* reg. SYNT2 (0x09) */
     710:	82 e4       	ldi	r24, 0x42	; 66
     712:	8b 83       	std	Y+3, r24	; 0x03
  tmp[3] = 0x76; /* reg. SYNT1 (0x0A) */
     714:	86 e7       	ldi	r24, 0x76	; 118
     716:	8c 83       	std	Y+4, r24	; 0x04
  tmp[4] = 0x21; /* reg. SYNT0 (0x0B) */
     718:	81 e2       	ldi	r24, 0x21	; 33
     71a:	8d 83       	std	Y+5, r24	; 0x05
  tmp[5] = 0x01; /* reg. CH_SPACE (0x0C) */
     71c:	11 e0       	ldi	r17, 0x01	; 1
     71e:	1e 83       	std	Y+6, r17	; 0x06
  SpiritSpiWriteRegisters(0x07, 6, tmp);
     720:	ae 01       	movw	r20, r28
     722:	4f 5f       	subi	r20, 0xFF	; 255
     724:	5f 4f       	sbci	r21, 0xFF	; 255
     726:	66 e0       	ldi	r22, 0x06	; 6
     728:	87 e0       	ldi	r24, 0x07	; 7
     72a:	0e 94 94 05 	call	0xb28	; 0xb28 <SdkEvalSpiWriteRegisters>
  tmp[0] = 0x17; /* reg. PA_POWER[8] (0x10) */
     72e:	87 e1       	ldi	r24, 0x17	; 23
     730:	89 83       	std	Y+1, r24	; 0x01
  SpiritSpiWriteRegisters(0x10, 1, tmp);
     732:	ae 01       	movw	r20, r28
     734:	4f 5f       	subi	r20, 0xFF	; 255
     736:	5f 4f       	sbci	r21, 0xFF	; 255
     738:	61 e0       	ldi	r22, 0x01	; 1
     73a:	80 e1       	ldi	r24, 0x10	; 16
     73c:	0e 94 94 05 	call	0xb28	; 0xb28 <SdkEvalSpiWriteRegisters>
  tmp[0] = 0xC8; /* reg. AFC2 (0x1E) */
     740:	88 ec       	ldi	r24, 0xC8	; 200
     742:	89 83       	std	Y+1, r24	; 0x01
  SpiritSpiWriteRegisters(0x1E, 1, tmp);
     744:	ae 01       	movw	r20, r28
     746:	4f 5f       	subi	r20, 0xFF	; 255
     748:	5f 4f       	sbci	r21, 0xFF	; 255
     74a:	61 e0       	ldi	r22, 0x01	; 1
     74c:	8e e1       	ldi	r24, 0x1E	; 30
     74e:	0e 94 94 05 	call	0xb28	; 0xb28 <SdkEvalSpiWriteRegisters>
  tmp[0] = 0x62; /* reg. AGCCTRL1 (0x25) */
     752:	82 e6       	ldi	r24, 0x62	; 98
     754:	89 83       	std	Y+1, r24	; 0x01
  SpiritSpiWriteRegisters(0x25, 1, tmp);
     756:	ae 01       	movw	r20, r28
     758:	4f 5f       	subi	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	85 e2       	ldi	r24, 0x25	; 37
     760:	0e 94 94 05 	call	0xb28	; 0xb28 <SdkEvalSpiWriteRegisters>
  tmp[0] = 0x15; /* reg. ANT_SELECT_CONF (0x27) */
     764:	85 e1       	ldi	r24, 0x15	; 21
     766:	89 83       	std	Y+1, r24	; 0x01
  SpiritSpiWriteRegisters(0x27, 1, tmp);
     768:	ae 01       	movw	r20, r28
     76a:	4f 5f       	subi	r20, 0xFF	; 255
     76c:	5f 4f       	sbci	r21, 0xFF	; 255
     76e:	61 e0       	ldi	r22, 0x01	; 1
     770:	87 e2       	ldi	r24, 0x27	; 39
     772:	0e 94 94 05 	call	0xb28	; 0xb28 <SdkEvalSpiWriteRegisters>
  tmp[0] = 0x3F; /* reg. PCKTCTRL2 (0x32) */
     776:	8f e3       	ldi	r24, 0x3F	; 63
     778:	89 83       	std	Y+1, r24	; 0x01
  tmp[1] = 0x30; /* reg. PCKTCTRL1 (0x33) */
     77a:	80 e3       	ldi	r24, 0x30	; 48
     77c:	8a 83       	std	Y+2, r24	; 0x02
  SpiritSpiWriteRegisters(0x32, 2, tmp);
     77e:	ae 01       	movw	r20, r28
     780:	4f 5f       	subi	r20, 0xFF	; 255
     782:	5f 4f       	sbci	r21, 0xFF	; 255
     784:	62 e0       	ldi	r22, 0x02	; 2
     786:	82 e3       	ldi	r24, 0x32	; 50
     788:	0e 94 94 05 	call	0xb28	; 0xb28 <SdkEvalSpiWriteRegisters>
  tmp[0] = 0x41; /* reg. PCKT_FLT_OPTIONS (0x4F) */
     78c:	81 e4       	ldi	r24, 0x41	; 65
     78e:	89 83       	std	Y+1, r24	; 0x01
  tmp[1] = 0x40; /* reg. PROTOCOL[2] (0x50) */
     790:	80 e4       	ldi	r24, 0x40	; 64
     792:	8a 83       	std	Y+2, r24	; 0x02
  tmp[2] = 0x01; /* reg. PROTOCOL[1] (0x51) */
     794:	1b 83       	std	Y+3, r17	; 0x03
  SpiritSpiWriteRegisters(0x4F, 3, tmp);
     796:	ae 01       	movw	r20, r28
     798:	4f 5f       	subi	r20, 0xFF	; 255
     79a:	5f 4f       	sbci	r21, 0xFF	; 255
     79c:	63 e0       	ldi	r22, 0x03	; 3
     79e:	8f e4       	ldi	r24, 0x4F	; 79
     7a0:	0e 94 94 05 	call	0xb28	; 0xb28 <SdkEvalSpiWriteRegisters>
  tmp[0] = 0x00; /* reg. RCO_VCO_CALIBR_IN[1] (0x6E) */
     7a4:	19 82       	std	Y+1, r1	; 0x01
  tmp[1] = 0x00; /* reg. RCO_VCO_CALIBR_IN[0] (0x6F) */
     7a6:	1a 82       	std	Y+2, r1	; 0x02
  SpiritSpiWriteRegisters(0x6E, 2, tmp);
     7a8:	ae 01       	movw	r20, r28
     7aa:	4f 5f       	subi	r20, 0xFF	; 255
     7ac:	5f 4f       	sbci	r21, 0xFF	; 255
     7ae:	62 e0       	ldi	r22, 0x02	; 2
     7b0:	8e e6       	ldi	r24, 0x6E	; 110
     7b2:	0e 94 94 05 	call	0xb28	; 0xb28 <SdkEvalSpiWriteRegisters>
  tmp[0] = 0xA0; /* reg. SYNTH_CONFIG[0] (0x9F) */
     7b6:	80 ea       	ldi	r24, 0xA0	; 160
     7b8:	89 83       	std	Y+1, r24	; 0x01
  SpiritSpiWriteRegisters(0x9F, 1, tmp);
     7ba:	ae 01       	movw	r20, r28
     7bc:	4f 5f       	subi	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	61 e0       	ldi	r22, 0x01	; 1
     7c2:	8f e9       	ldi	r24, 0x9F	; 159
     7c4:	0e 94 94 05 	call	0xb28	; 0xb28 <SdkEvalSpiWriteRegisters>
  tmp[0] = 0x25; /* reg. VCO_CONFIG (0xA1) */
     7c8:	85 e2       	ldi	r24, 0x25	; 37
     7ca:	89 83       	std	Y+1, r24	; 0x01
  SpiritSpiWriteRegisters(0xA1, 1, tmp);
     7cc:	ae 01       	movw	r20, r28
     7ce:	4f 5f       	subi	r20, 0xFF	; 255
     7d0:	5f 4f       	sbci	r21, 0xFF	; 255
     7d2:	61 e0       	ldi	r22, 0x01	; 1
     7d4:	81 ea       	ldi	r24, 0xA1	; 161
     7d6:	0e 94 94 05 	call	0xb28	; 0xb28 <SdkEvalSpiWriteRegisters>
  tmp[0] = 0x35; /* reg. DEM_CONFIG (0xA3) */
     7da:	85 e3       	ldi	r24, 0x35	; 53
     7dc:	89 83       	std	Y+1, r24	; 0x01
  SpiritSpiWriteRegisters(0xA3, 1, tmp);
     7de:	ae 01       	movw	r20, r28
     7e0:	4f 5f       	subi	r20, 0xFF	; 255
     7e2:	5f 4f       	sbci	r21, 0xFF	; 255
     7e4:	61 e0       	ldi	r22, 0x01	; 1
     7e6:	83 ea       	ldi	r24, 0xA3	; 163
     7e8:	0e 94 94 05 	call	0xb28	; 0xb28 <SdkEvalSpiWriteRegisters>

  /* VCO unwanted calibration workaround. 
     With this sequence, the PA is on after the eventual VCO calibration expires.
  */
  tmp[0]=0x22;SpiritSpiWriteRegisters(0xBC, 1, tmp);
     7ec:	82 e2       	ldi	r24, 0x22	; 34
     7ee:	89 83       	std	Y+1, r24	; 0x01
     7f0:	ae 01       	movw	r20, r28
     7f2:	4f 5f       	subi	r20, 0xFF	; 255
     7f4:	5f 4f       	sbci	r21, 0xFF	; 255
     7f6:	61 e0       	ldi	r22, 0x01	; 1
     7f8:	8c eb       	ldi	r24, 0xBC	; 188
     7fa:	0e 94 94 05 	call	0xb28	; 0xb28 <SdkEvalSpiWriteRegisters>

}
     7fe:	26 96       	adiw	r28, 0x06	; 6
     800:	0f b6       	in	r0, 0x3f	; 63
     802:	f8 94       	cli
     804:	de bf       	out	0x3e, r29	; 62
     806:	0f be       	out	0x3f, r0	; 63
     808:	cd bf       	out	0x3d, r28	; 61
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	1f 91       	pop	r17
     810:	08 95       	ret

00000812 <SpiritVcoCalibration>:

/* This is a VCO calibration routine used to recalibrate the VCO of SPIRIT1 in a safe way.
 IMPORTANT: It must be called from READY state. */
void SpiritVcoCalibration(void)
{
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	cd b7       	in	r28, 0x3d	; 61
     818:	de b7       	in	r29, 0x3e	; 62
     81a:	27 97       	sbiw	r28, 0x07	; 7
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	f8 94       	cli
     820:	de bf       	out	0x3e, r29	; 62
     822:	0f be       	out	0x3f, r0	; 63
     824:	cd bf       	out	0x3d, r28	; 61
  uint8_t cal_words[2];
  uint8_t state;


    
  SpiritSpiReadRegisters(0x9E, 1, tmp);
     826:	ae 01       	movw	r20, r28
     828:	4f 5f       	subi	r20, 0xFF	; 255
     82a:	5f 4f       	sbci	r21, 0xFF	; 255
     82c:	61 e0       	ldi	r22, 0x01	; 1
     82e:	8e e9       	ldi	r24, 0x9E	; 158
     830:	0e 94 67 05 	call	0xace	; 0xace <SdkEvalSpiReadRegisters>
  tmp[0] |= 0x80;
     834:	89 81       	ldd	r24, Y+1	; 0x01
     836:	80 68       	ori	r24, 0x80	; 128
     838:	89 83       	std	Y+1, r24	; 0x01
  SpiritSpiWriteRegisters(0x9E, 1, tmp); /* REFDIV bit set (to be restored) */
     83a:	ae 01       	movw	r20, r28
     83c:	4f 5f       	subi	r20, 0xFF	; 255
     83e:	5f 4f       	sbci	r21, 0xFF	; 255
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	8e e9       	ldi	r24, 0x9E	; 158
     844:	0e 94 94 05 	call	0xb28	; 0xb28 <SdkEvalSpiWriteRegisters>

  /* As a consequence we need to double the SYNT word to generate the target frequency */
  tmp[0] = 0x0C;
     848:	8c e0       	ldi	r24, 0x0C	; 12
     84a:	89 83       	std	Y+1, r24	; 0x01
  tmp[1] = 0x84;
     84c:	84 e8       	ldi	r24, 0x84	; 132
     84e:	8a 83       	std	Y+2, r24	; 0x02
  tmp[2] = 0xEC;
     850:	8c ee       	ldi	r24, 0xEC	; 236
     852:	8b 83       	std	Y+3, r24	; 0x03
  tmp[3] = 0x41;
     854:	81 e4       	ldi	r24, 0x41	; 65
     856:	8c 83       	std	Y+4, r24	; 0x04
  SpiritSpiWriteRegisters(0x08, 4, tmp);
     858:	ae 01       	movw	r20, r28
     85a:	4f 5f       	subi	r20, 0xFF	; 255
     85c:	5f 4f       	sbci	r21, 0xFF	; 255
     85e:	64 e0       	ldi	r22, 0x04	; 4
     860:	88 e0       	ldi	r24, 0x08	; 8
     862:	0e 94 94 05 	call	0xb28	; 0xb28 <SdkEvalSpiWriteRegisters>


  tmp[0] = 0x25; SpiritSpiWriteRegisters(0xA1,1,tmp); /* increase VCO current (restore to 0x11) */
     866:	85 e2       	ldi	r24, 0x25	; 37
     868:	89 83       	std	Y+1, r24	; 0x01
     86a:	ae 01       	movw	r20, r28
     86c:	4f 5f       	subi	r20, 0xFF	; 255
     86e:	5f 4f       	sbci	r21, 0xFF	; 255
     870:	61 e0       	ldi	r22, 0x01	; 1
     872:	81 ea       	ldi	r24, 0xA1	; 161
     874:	0e 94 94 05 	call	0xb28	; 0xb28 <SdkEvalSpiWriteRegisters>
  
  SpiritSpiReadRegisters(0x50,1,tmp);
     878:	ae 01       	movw	r20, r28
     87a:	4f 5f       	subi	r20, 0xFF	; 255
     87c:	5f 4f       	sbci	r21, 0xFF	; 255
     87e:	61 e0       	ldi	r22, 0x01	; 1
     880:	80 e5       	ldi	r24, 0x50	; 80
     882:	0e 94 67 05 	call	0xace	; 0xace <SdkEvalSpiReadRegisters>
  tmp[0] |= 0x02; 
     886:	89 81       	ldd	r24, Y+1	; 0x01
     888:	82 60       	ori	r24, 0x02	; 2
     88a:	89 83       	std	Y+1, r24	; 0x01
  SpiritSpiWriteRegisters(0x50,1,tmp); /* enable VCO calibration (to be restored) */
     88c:	ae 01       	movw	r20, r28
     88e:	4f 5f       	subi	r20, 0xFF	; 255
     890:	5f 4f       	sbci	r21, 0xFF	; 255
     892:	61 e0       	ldi	r22, 0x01	; 1
     894:	80 e5       	ldi	r24, 0x50	; 80
     896:	0e 94 94 05 	call	0xb28	; 0xb28 <SdkEvalSpiWriteRegisters>
  
  SpiritSpiCommandStrobes(COMMAND_LOCKTX);
     89a:	86 e6       	ldi	r24, 0x66	; 102
     89c:	0e 94 c0 05 	call	0xb80	; 0xb80 <SdkEvalSpiCommandStrobes>
  do{
    SpiritSpiReadRegisters(0xC1, 1, &state);
     8a0:	ae 01       	movw	r20, r28
     8a2:	49 5f       	subi	r20, 0xF9	; 249
     8a4:	5f 4f       	sbci	r21, 0xFF	; 255
     8a6:	61 e0       	ldi	r22, 0x01	; 1
     8a8:	81 ec       	ldi	r24, 0xC1	; 193
     8aa:	0e 94 67 05 	call	0xace	; 0xace <SdkEvalSpiReadRegisters>
  }while((state&0xFE) != 0x1E); /* wait until LOCK (MC_STATE = 0x0F <<1) */
     8ae:	8f 81       	ldd	r24, Y+7	; 0x07
     8b0:	8e 7f       	andi	r24, 0xFE	; 254
     8b2:	8e 31       	cpi	r24, 0x1E	; 30
     8b4:	a9 f7       	brne	.-22     	; 0x8a0 <SpiritVcoCalibration+0x8e>
  SpiritSpiReadRegisters(0xE5, 1, &cal_words[0]); /* calib out word for TX */
     8b6:	ae 01       	movw	r20, r28
     8b8:	4b 5f       	subi	r20, 0xFB	; 251
     8ba:	5f 4f       	sbci	r21, 0xFF	; 255
     8bc:	61 e0       	ldi	r22, 0x01	; 1
     8be:	85 ee       	ldi	r24, 0xE5	; 229
     8c0:	0e 94 67 05 	call	0xace	; 0xace <SdkEvalSpiReadRegisters>
  
  SpiritSpiCommandStrobes(COMMAND_READY);
     8c4:	82 e6       	ldi	r24, 0x62	; 98
     8c6:	0e 94 c0 05 	call	0xb80	; 0xb80 <SdkEvalSpiCommandStrobes>
   do{
    SpiritSpiReadRegisters(0xC1, 1, &state);
     8ca:	ae 01       	movw	r20, r28
     8cc:	49 5f       	subi	r20, 0xF9	; 249
     8ce:	5f 4f       	sbci	r21, 0xFF	; 255
     8d0:	61 e0       	ldi	r22, 0x01	; 1
     8d2:	81 ec       	ldi	r24, 0xC1	; 193
     8d4:	0e 94 67 05 	call	0xace	; 0xace <SdkEvalSpiReadRegisters>
  }while((state&0xFE) != 0x06); /* wait until READY (MC_STATE = 0x03 <<1) */
     8d8:	8f 81       	ldd	r24, Y+7	; 0x07
     8da:	8e 7f       	andi	r24, 0xFE	; 254
     8dc:	86 30       	cpi	r24, 0x06	; 6
     8de:	a9 f7       	brne	.-22     	; 0x8ca <SpiritVcoCalibration+0xb8>
  
  SpiritSpiCommandStrobes(COMMAND_LOCKRX);
     8e0:	85 e6       	ldi	r24, 0x65	; 101
     8e2:	0e 94 c0 05 	call	0xb80	; 0xb80 <SdkEvalSpiCommandStrobes>
  do{
    SpiritSpiReadRegisters(0xC1, 1, &state);
     8e6:	ae 01       	movw	r20, r28
     8e8:	49 5f       	subi	r20, 0xF9	; 249
     8ea:	5f 4f       	sbci	r21, 0xFF	; 255
     8ec:	61 e0       	ldi	r22, 0x01	; 1
     8ee:	81 ec       	ldi	r24, 0xC1	; 193
     8f0:	0e 94 67 05 	call	0xace	; 0xace <SdkEvalSpiReadRegisters>
  }while((state&0xFE) != 0x1E); /* wait until LOCK (MC_STATE = 0x0F <<1) */
     8f4:	8f 81       	ldd	r24, Y+7	; 0x07
     8f6:	8e 7f       	andi	r24, 0xFE	; 254
     8f8:	8e 31       	cpi	r24, 0x1E	; 30
     8fa:	a9 f7       	brne	.-22     	; 0x8e6 <SpiritVcoCalibration+0xd4>
  SpiritSpiReadRegisters(0xE5, 1, &cal_words[1]); /* calib out word for RX */
     8fc:	ae 01       	movw	r20, r28
     8fe:	4a 5f       	subi	r20, 0xFA	; 250
     900:	5f 4f       	sbci	r21, 0xFF	; 255
     902:	61 e0       	ldi	r22, 0x01	; 1
     904:	85 ee       	ldi	r24, 0xE5	; 229
     906:	0e 94 67 05 	call	0xace	; 0xace <SdkEvalSpiReadRegisters>
  
  SpiritSpiCommandStrobes(COMMAND_READY);
     90a:	82 e6       	ldi	r24, 0x62	; 98
     90c:	0e 94 c0 05 	call	0xb80	; 0xb80 <SdkEvalSpiCommandStrobes>
   do{
    SpiritSpiReadRegisters(0xC1, 1, &state);
     910:	ae 01       	movw	r20, r28
     912:	49 5f       	subi	r20, 0xF9	; 249
     914:	5f 4f       	sbci	r21, 0xFF	; 255
     916:	61 e0       	ldi	r22, 0x01	; 1
     918:	81 ec       	ldi	r24, 0xC1	; 193
     91a:	0e 94 67 05 	call	0xace	; 0xace <SdkEvalSpiReadRegisters>
  }while((state&0xFE) != 0x06); /* wait until READY (MC_STATE = 0x03 <<1) */
     91e:	8f 81       	ldd	r24, Y+7	; 0x07
     920:	8e 7f       	andi	r24, 0xFE	; 254
     922:	86 30       	cpi	r24, 0x06	; 6
     924:	a9 f7       	brne	.-22     	; 0x910 <__stack+0x11>
  
  SpiritSpiReadRegisters(0x50,1,tmp);
     926:	ae 01       	movw	r20, r28
     928:	4f 5f       	subi	r20, 0xFF	; 255
     92a:	5f 4f       	sbci	r21, 0xFF	; 255
     92c:	61 e0       	ldi	r22, 0x01	; 1
     92e:	80 e5       	ldi	r24, 0x50	; 80
     930:	0e 94 67 05 	call	0xace	; 0xace <SdkEvalSpiReadRegisters>
  tmp[0] &= 0xFD; 
     934:	89 81       	ldd	r24, Y+1	; 0x01
     936:	8d 7f       	andi	r24, 0xFD	; 253
     938:	89 83       	std	Y+1, r24	; 0x01
  SpiritSpiWriteRegisters(0x50,1,tmp); /* VCO calib restored to 0 */
     93a:	ae 01       	movw	r20, r28
     93c:	4f 5f       	subi	r20, 0xFF	; 255
     93e:	5f 4f       	sbci	r21, 0xFF	; 255
     940:	61 e0       	ldi	r22, 0x01	; 1
     942:	80 e5       	ldi	r24, 0x50	; 80
     944:	0e 94 94 05 	call	0xb28	; 0xb28 <SdkEvalSpiWriteRegisters>

  SpiritSpiReadRegisters(0x9E, 1, tmp);
     948:	ae 01       	movw	r20, r28
     94a:	4f 5f       	subi	r20, 0xFF	; 255
     94c:	5f 4f       	sbci	r21, 0xFF	; 255
     94e:	61 e0       	ldi	r22, 0x01	; 1
     950:	8e e9       	ldi	r24, 0x9E	; 158
     952:	0e 94 67 05 	call	0xace	; 0xace <SdkEvalSpiReadRegisters>
  tmp[0] &= 0x7F;
     956:	89 81       	ldd	r24, Y+1	; 0x01
     958:	8f 77       	andi	r24, 0x7F	; 127
     95a:	89 83       	std	Y+1, r24	; 0x01
  SpiritSpiWriteRegisters(0x9E, 1, tmp); /* REFDIV bit reset */
     95c:	ae 01       	movw	r20, r28
     95e:	4f 5f       	subi	r20, 0xFF	; 255
     960:	5f 4f       	sbci	r21, 0xFF	; 255
     962:	61 e0       	ldi	r22, 0x01	; 1
     964:	8e e9       	ldi	r24, 0x9E	; 158
     966:	0e 94 94 05 	call	0xb28	; 0xb28 <SdkEvalSpiWriteRegisters>

  
  tmp[0] = 0x06;
     96a:	86 e0       	ldi	r24, 0x06	; 6
     96c:	89 83       	std	Y+1, r24	; 0x01
  tmp[1] = 0x42;
     96e:	82 e4       	ldi	r24, 0x42	; 66
     970:	8a 83       	std	Y+2, r24	; 0x02
  tmp[2] = 0x76;
     972:	86 e7       	ldi	r24, 0x76	; 118
     974:	8b 83       	std	Y+3, r24	; 0x03
  tmp[3] = 0x21;
     976:	81 e2       	ldi	r24, 0x21	; 33
     978:	8c 83       	std	Y+4, r24	; 0x04
  SpiritSpiWriteRegisters(0x08, 4, tmp); /* SYNTH WORD restored */
     97a:	ae 01       	movw	r20, r28
     97c:	4f 5f       	subi	r20, 0xFF	; 255
     97e:	5f 4f       	sbci	r21, 0xFF	; 255
     980:	64 e0       	ldi	r22, 0x04	; 4
     982:	88 e0       	ldi	r24, 0x08	; 8
     984:	0e 94 94 05 	call	0xb28	; 0xb28 <SdkEvalSpiWriteRegisters>

  
  SpiritSpiWriteRegisters(0x6E,2,cal_words); /* write both calibration words */
     988:	ae 01       	movw	r20, r28
     98a:	4b 5f       	subi	r20, 0xFB	; 251
     98c:	5f 4f       	sbci	r21, 0xFF	; 255
     98e:	62 e0       	ldi	r22, 0x02	; 2
     990:	8e e6       	ldi	r24, 0x6E	; 110
     992:	0e 94 94 05 	call	0xb28	; 0xb28 <SdkEvalSpiWriteRegisters>

}
     996:	27 96       	adiw	r28, 0x07	; 7
     998:	0f b6       	in	r0, 0x3f	; 63
     99a:	f8 94       	cli
     99c:	de bf       	out	0x3e, r29	; 62
     99e:	0f be       	out	0x3f, r0	; 63
     9a0:	cd bf       	out	0x3d, r28	; 61
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	08 95       	ret

000009a8 <banner>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void banner (void)
{
	printf("\r\nALTETA-AS2 generation project for SPIRIT1 v.1.001");
     9a8:	87 eb       	ldi	r24, 0xB7	; 183
     9aa:	92 e0       	ldi	r25, 0x02	; 2
     9ac:	9f 93       	push	r25
     9ae:	8f 93       	push	r24
     9b0:	0e 94 c1 08 	call	0x1182	; 0x1182 <printf>
	printf("\r\n-------------------------------------------------");
     9b4:	8b ee       	ldi	r24, 0xEB	; 235
     9b6:	92 e0       	ldi	r25, 0x02	; 2
     9b8:	9f 93       	push	r25
     9ba:	8f 93       	push	r24
     9bc:	0e 94 c1 08 	call	0x1182	; 0x1182 <printf>
}
     9c0:	0f 90       	pop	r0
     9c2:	0f 90       	pop	r0
     9c4:	0f 90       	pop	r0
     9c6:	0f 90       	pop	r0
     9c8:	08 95       	ret

000009ca <__vector_18>:

ISR(USART_RX_vect)
{
     9ca:	1f 92       	push	r1
     9cc:	0f 92       	push	r0
     9ce:	0f b6       	in	r0, 0x3f	; 63
     9d0:	0f 92       	push	r0
     9d2:	11 24       	eor	r1, r1
     9d4:	2f 93       	push	r18
     9d6:	3f 93       	push	r19
     9d8:	4f 93       	push	r20
     9da:	5f 93       	push	r21
     9dc:	6f 93       	push	r22
     9de:	7f 93       	push	r23
     9e0:	8f 93       	push	r24
     9e2:	9f 93       	push	r25
     9e4:	af 93       	push	r26
     9e6:	bf 93       	push	r27
     9e8:	ef 93       	push	r30
     9ea:	ff 93       	push	r31
	char data;
	data=UDR0;
     9ec:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	terminal_proc (data);
     9f0:	0e 94 44 07 	call	0xe88	; 0xe88 <terminal_proc>
}
     9f4:	ff 91       	pop	r31
     9f6:	ef 91       	pop	r30
     9f8:	bf 91       	pop	r27
     9fa:	af 91       	pop	r26
     9fc:	9f 91       	pop	r25
     9fe:	8f 91       	pop	r24
     a00:	7f 91       	pop	r23
     a02:	6f 91       	pop	r22
     a04:	5f 91       	pop	r21
     a06:	4f 91       	pop	r20
     a08:	3f 91       	pop	r19
     a0a:	2f 91       	pop	r18
     a0c:	0f 90       	pop	r0
     a0e:	0f be       	out	0x3f, r0	; 63
     a10:	0f 90       	pop	r0
     a12:	1f 90       	pop	r1
     a14:	18 95       	reti

00000a16 <spi_m>:
*/

unsigned char spi_m(unsigned char data)
{
	/* Start transmission */
	SPDR = data;
     a16:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
     a18:	0d b4       	in	r0, 0x2d	; 45
     a1a:	07 fe       	sbrs	r0, 7
     a1c:	fd cf       	rjmp	.-6      	; 0xa18 <spi_m+0x2>
	SPSR|=(1<<SPIF);
     a1e:	8d b5       	in	r24, 0x2d	; 45
     a20:	80 68       	ori	r24, 0x80	; 128
     a22:	8d bd       	out	0x2d, r24	; 45
	return SPDR;
     a24:	8e b5       	in	r24, 0x2e	; 46
}
     a26:	08 95       	ret

00000a28 <spi_init>:
void spi_init(void)
{
	/* Set MOSI and SCK output, all others input */
	
	
	DDRB=   (1<<2);	  //SS	
     a28:	84 e0       	ldi	r24, 0x04	; 4
     a2a:	84 b9       	out	0x04, r24	; 4
	PORTB|= (1<<2);
     a2c:	2a 9a       	sbi	0x05, 2	; 5
	
	DDRB|= (1<<5);    //SCK
     a2e:	25 9a       	sbi	0x04, 5	; 4
	DDRB|= (1<<3);    //MOSI
     a30:	23 9a       	sbi	0x04, 3	; 4
	DDRB&=~(1<<4);    //MISO
     a32:	24 98       	cbi	0x04, 4	; 4
	
	PRR &= ~(1 << PRSPI);
     a34:	e4 e6       	ldi	r30, 0x64	; 100
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	80 81       	ld	r24, Z
     a3a:	8b 7f       	andi	r24, 0xFB	; 251
     a3c:	80 83       	st	Z, r24
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(0<<SPI2X)|(0<<SPR1)|(0<<SPIE)|(0<<CPOL)|(0<<CPHA);
     a3e:	81 e5       	ldi	r24, 0x51	; 81
     a40:	8c bd       	out	0x2c, r24	; 44
	//CPHA
	//SPI2X
	//SPR1
	//SPR0
	
	SPSR|=(1<<SPIF);
     a42:	8d b5       	in	r24, 0x2d	; 45
     a44:	80 68       	ori	r24, 0x80	; 128
     a46:	8d bd       	out	0x2d, r24	; 45
     a48:	08 95       	ret

00000a4a <main>:
	
	unsigned char stx[4];
	unsigned char srx[4];
	int ii=0xff;
	
	cli();	
     a4a:	f8 94       	cli
	
	
	static FILE mystdout = FDEV_SETUP_STREAM(USART_0_write, NULL, _FDEV_SETUP_WRITE);
	stdout=&mystdout;
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	91 e0       	ldi	r25, 0x01	; 1
     a50:	90 93 ad 05 	sts	0x05AD, r25	; 0x8005ad <__iob+0x3>
     a54:	80 93 ac 05 	sts	0x05AC, r24	; 0x8005ac <__iob+0x2>
	
	atmel_start_init();
     a58:	0e 94 b6 00 	call	0x16c	; 0x16c <atmel_start_init>
	banner();
     a5c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <banner>
	
	DDRC|=(1<<5);
     a60:	3d 9a       	sbi	0x07, 5	; 7
    PORTC|= (1<<5); 
     a62:	45 9a       	sbi	0x08, 5	; 8
	ii=0xff; while (ii--);
     a64:	c0 e0       	ldi	r28, 0x00	; 0
     a66:	d1 e0       	ldi	r29, 0x01	; 1
     a68:	21 97       	sbiw	r28, 0x01	; 1
     a6a:	f1 f7       	brne	.-4      	; 0xa68 <main+0x1e>
    PORTC&=~(1<<5); 
     a6c:	45 98       	cbi	0x08, 5	; 8
	DDRB|=(1<<5);    //sck
	DDRB|=(1<<3);    //mosi
	DDRB&=~(1<<4);   //miso
*/

	spi_init();	
     a6e:	0e 94 14 05 	call	0xa28	; 0xa28 <spi_init>
	
//SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
//SPSR=(0<<SPI2X);
	
	sei();
     a72:	78 94       	sei

		PORTB|=(1<<2);
     a74:	2a 9a       	sbi	0x05, 2	; 5
		PORTB&=~(1<<2);
     a76:	2a 98       	cbi	0x05, 2	; 5
		//data=SPI_0_exchange_byte((uint8_t)adr>>8&0xff);
		//data=SPI_0_exchange_byte(0x01); while (SPI_0_status_busy());
		data=spi_m(0x01);
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	0e 94 0b 05 	call	0xa16	; 0xa16 <spi_m>
		stat|=(unsigned short)data; 
		stat<<=8;
	
		//data=SPI_0_exchange_byte((uint8_t)adr&0xff);
		//data=SPI_0_exchange_byte(rad);  while (SPI_0_status_busy());
		data=spi_m(rad);
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	0e 94 0b 05 	call	0xa16	; 0xa16 <spi_m>
		stat|=(unsigned short)data;
	
		//data=SPI_0_exchange_byte(0x55);  while (SPI_0_status_busy());
		data=spi_m(0xaa);
     a84:	8a ea       	ldi	r24, 0xAA	; 170
     a86:	0e 94 0b 05 	call	0xa16	; 0xa16 <spi_m>
		reg|=(unsigned short)data;
		reg<<=8;
		//data=SPI_0_exchange_byte(0x55);  while (SPI_0_status_busy());
		data=spi_m(0xaa);
     a8a:	8a ea       	ldi	r24, 0xAA	; 170
     a8c:	0e 94 0b 05 	call	0xa16	; 0xa16 <spi_m>
		reg|=(unsigned short)data;
		PORTB|=(1<<2);				
     a90:	2a 9a       	sbi	0x05, 2	; 5


		PORTB|=(1<<2);
     a92:	2a 9a       	sbi	0x05, 2	; 5
		PORTB&=~(1<<2);
     a94:	2a 98       	cbi	0x05, 2	; 5
		//data=SPI_0_exchange_byte((uint8_t)adr>>8&0xff);
		//data=SPI_0_exchange_byte(0x01); while (SPI_0_status_busy());
		data=spi_m(0x01);
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	0e 94 0b 05 	call	0xa16	; 0xa16 <spi_m>
		stat|=(unsigned short)data;
		stat<<=8;
		
		//data=SPI_0_exchange_byte((uint8_t)adr&0xff);
		//data=SPI_0_exchange_byte(rad);  while (SPI_0_status_busy());
		data=spi_m(rad);
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	0e 94 0b 05 	call	0xa16	; 0xa16 <spi_m>
		stat|=(unsigned short)data;
		
		//data=SPI_0_exchange_byte(0x55);  while (SPI_0_status_busy());
		data=spi_m(0xaa);
     aa2:	8a ea       	ldi	r24, 0xAA	; 170
     aa4:	0e 94 0b 05 	call	0xa16	; 0xa16 <spi_m>
		reg|=(unsigned short)data;
		reg<<=8;
		//data=SPI_0_exchange_byte(0x55);  while (SPI_0_status_busy());
		data=spi_m(0xaa);
     aa8:	8a ea       	ldi	r24, 0xAA	; 170
     aaa:	0e 94 0b 05 	call	0xa16	; 0xa16 <spi_m>
		reg|=(unsigned short)data;
		PORTB|=(1<<2);
     aae:	2a 9a       	sbi	0x05, 2	; 5


	terminal_init ();
     ab0:	0e 94 1e 07 	call	0xe3c	; 0xe3c <terminal_init>

	/* Replace with your application code */
	while (1) {
		
		
		      ii=0xffff; while (ii--);
     ab4:	ce 01       	movw	r24, r28
     ab6:	01 97       	sbiw	r24, 0x01	; 1
     ab8:	f1 f7       	brne	.-4      	; 0xab6 <main+0x6c>
			  
			  if (RXFLAG) 
     aba:	20 91 eb 03 	lds	r18, 0x03EB	; 0x8003eb <flags1>
     abe:	20 ff       	sbrs	r18, 0
     ac0:	03 c0       	rjmp	.+6      	; 0xac8 <main+0x7e>
			  {
				terminal_proc_cmd();
     ac2:	0e 94 62 07 	call	0xec4	; 0xec4 <terminal_proc_cmd>
     ac6:	f6 cf       	rjmp	.-20     	; 0xab4 <main+0x6a>
     ac8:	01 97       	sbiw	r24, 0x01	; 1
			  }
			  else
			  {
				  ii=0xffff; while (ii--);
     aca:	f1 f7       	brne	.-4      	; 0xac8 <main+0x7e>
     acc:	f3 cf       	rjmp	.-26     	; 0xab4 <main+0x6a>

00000ace <SdkEvalSpiReadRegisters>:
#define SPIRIT_WRITE_PREFIX           0x00
#define SPIRIT_CMD_PREFIX             0x80


StatusBytes SdkEvalSpiReadRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
     ace:	ef 92       	push	r14
     ad0:	ff 92       	push	r15
     ad2:	0f 93       	push	r16
     ad4:	1f 93       	push	r17
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	d8 2f       	mov	r29, r24
     adc:	c6 2f       	mov	r28, r22
     ade:	8a 01       	movw	r16, r20

	uint16_t        status=0;
	uint8_t         data;
	uint16_t        i=0;
	
	SPIRIT_SS_DOWN;
     ae0:	2a 98       	cbi	0x05, 2	; 5
	
	data=spi_m(SPIRTT_READ_PREFIX);
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	0e 94 0b 05 	call	0xa16	; 0xa16 <spi_m>
     ae8:	e8 2e       	mov	r14, r24
	status|=((uint16_t)data)<<8;
	data=spi_m(cRegAddress);
     aea:	8d 2f       	mov	r24, r29
     aec:	0e 94 0b 05 	call	0xa16	; 0xa16 <spi_m>
	status|=((uint16_t)data)<<0;
     af0:	f1 2c       	mov	r15, r1
     af2:	fe 2c       	mov	r15, r14
     af4:	ee 24       	eor	r14, r14
     af6:	e8 2a       	or	r14, r24
	
	for (i=0; i<cNbBytes; i++)
     af8:	6c 2f       	mov	r22, r28
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	61 15       	cp	r22, r1
     afe:	71 05       	cpc	r23, r1
     b00:	51 f0       	breq	.+20     	; 0xb16 <SdkEvalSpiReadRegisters+0x48>
     b02:	e8 01       	movw	r28, r16
     b04:	06 0f       	add	r16, r22
     b06:	17 1f       	adc	r17, r23
	{
		data=spi_m(0x55);
     b08:	85 e5       	ldi	r24, 0x55	; 85
     b0a:	0e 94 0b 05 	call	0xa16	; 0xa16 <spi_m>
		pcBuffer[i]=data;
     b0e:	89 93       	st	Y+, r24
	data=spi_m(SPIRTT_READ_PREFIX);
	status|=((uint16_t)data)<<8;
	data=spi_m(cRegAddress);
	status|=((uint16_t)data)<<0;
	
	for (i=0; i<cNbBytes; i++)
     b10:	c0 17       	cp	r28, r16
     b12:	d1 07       	cpc	r29, r17
     b14:	c9 f7       	brne	.-14     	; 0xb08 <SdkEvalSpiReadRegisters+0x3a>
	{
		data=spi_m(0x55);
		pcBuffer[i]=data;
	}
	
	SPIRIT_SS_UP;
     b16:	2a 9a       	sbi	0x05, 2	; 5
	
	memcpy(&s_Spirit_Status,&status,2);

	return s_Spirit_Status;
}
     b18:	c7 01       	movw	r24, r14
     b1a:	df 91       	pop	r29
     b1c:	cf 91       	pop	r28
     b1e:	1f 91       	pop	r17
     b20:	0f 91       	pop	r16
     b22:	ff 90       	pop	r15
     b24:	ef 90       	pop	r14
     b26:	08 95       	ret

00000b28 <SdkEvalSpiWriteRegisters>:

StatusBytes SdkEvalSpiWriteRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
     b28:	ef 92       	push	r14
     b2a:	ff 92       	push	r15
     b2c:	0f 93       	push	r16
     b2e:	1f 93       	push	r17
     b30:	cf 93       	push	r28
     b32:	df 93       	push	r29
     b34:	d8 2f       	mov	r29, r24
     b36:	c6 2f       	mov	r28, r22
     b38:	8a 01       	movw	r16, r20
	StatusBytes     s_Spirit_Status;
	uint16_t        status=0;
	uint8_t         data;
	uint16_t        i=0;
	
	SPIRIT_SS_DOWN;
     b3a:	2a 98       	cbi	0x05, 2	; 5
	
	data=spi_m(SPIRIT_WRITE_PREFIX);
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	0e 94 0b 05 	call	0xa16	; 0xa16 <spi_m>
     b42:	e8 2e       	mov	r14, r24
	status|=((uint16_t)data)<<8;
	data=spi_m(cRegAddress);
     b44:	8d 2f       	mov	r24, r29
     b46:	0e 94 0b 05 	call	0xa16	; 0xa16 <spi_m>
	status|=((uint16_t)data)<<0;
     b4a:	f1 2c       	mov	r15, r1
     b4c:	fe 2c       	mov	r15, r14
     b4e:	ee 24       	eor	r14, r14
     b50:	e8 2a       	or	r14, r24
	
	for (i=0; i<cNbBytes; i++)
     b52:	6c 2f       	mov	r22, r28
     b54:	70 e0       	ldi	r23, 0x00	; 0
     b56:	61 15       	cp	r22, r1
     b58:	71 05       	cpc	r23, r1
     b5a:	49 f0       	breq	.+18     	; 0xb6e <SdkEvalSpiWriteRegisters+0x46>
     b5c:	e8 01       	movw	r28, r16
     b5e:	06 0f       	add	r16, r22
     b60:	17 1f       	adc	r17, r23
	{
		data=spi_m(pcBuffer[i]);
     b62:	89 91       	ld	r24, Y+
     b64:	0e 94 0b 05 	call	0xa16	; 0xa16 <spi_m>
	data=spi_m(SPIRIT_WRITE_PREFIX);
	status|=((uint16_t)data)<<8;
	data=spi_m(cRegAddress);
	status|=((uint16_t)data)<<0;
	
	for (i=0; i<cNbBytes; i++)
     b68:	c0 17       	cp	r28, r16
     b6a:	d1 07       	cpc	r29, r17
     b6c:	d1 f7       	brne	.-12     	; 0xb62 <SdkEvalSpiWriteRegisters+0x3a>
	{
		data=spi_m(pcBuffer[i]);
	}
	
	SPIRIT_SS_UP;
     b6e:	2a 9a       	sbi	0x05, 2	; 5
	
	memcpy(&s_Spirit_Status,&status,2);
	
	return s_Spirit_Status;

}
     b70:	c7 01       	movw	r24, r14
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	1f 91       	pop	r17
     b78:	0f 91       	pop	r16
     b7a:	ff 90       	pop	r15
     b7c:	ef 90       	pop	r14
     b7e:	08 95       	ret

00000b80 <SdkEvalSpiCommandStrobes>:


StatusBytes SdkEvalSpiCommandStrobes(uint8_t cCommandCode)
{
     b80:	cf 93       	push	r28
     b82:	df 93       	push	r29
     b84:	d8 2f       	mov	r29, r24

	StatusBytes     s_Spirit_Status;
	uint16_t        status=0;
	uint8_t         data;
	
	SPIRIT_SS_DOWN;
     b86:	2a 98       	cbi	0x05, 2	; 5
	
	data=spi_m(SPIRIT_CMD_PREFIX);
     b88:	80 e8       	ldi	r24, 0x80	; 128
     b8a:	0e 94 0b 05 	call	0xa16	; 0xa16 <spi_m>
     b8e:	c8 2f       	mov	r28, r24
	status|=((uint16_t)data)<<8;
	data=spi_m(cCommandCode);
     b90:	8d 2f       	mov	r24, r29
     b92:	0e 94 0b 05 	call	0xa16	; 0xa16 <spi_m>
	status|=((uint16_t)data)<<0;
	
	SPIRIT_SS_UP;
     b96:	2a 9a       	sbi	0x05, 2	; 5
	
	memcpy(&s_Spirit_Status,&status,2);
     b98:	2c 2f       	mov	r18, r28
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	32 2f       	mov	r19, r18
     b9e:	22 27       	eor	r18, r18
	return s_Spirit_Status;


}
     ba0:	a9 01       	movw	r20, r18
     ba2:	48 2b       	or	r20, r24
     ba4:	ca 01       	movw	r24, r20
     ba6:	df 91       	pop	r29
     ba8:	cf 91       	pop	r28
     baa:	08 95       	ret

00000bac <USART_0_initialization>:
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
     bac:	50 98       	cbi	0x0a, 0	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
     bae:	58 98       	cbi	0x0b, 0	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
     bb0:	51 9a       	sbi	0x0a, 1	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
     bb2:	59 98       	cbi	0x0b, 1	; 11
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
     bb4:	0e 94 57 06 	call	0xcae	; 0xcae <USART_0_init>
     bb8:	08 95       	ret

00000bba <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR = (1 << PRSPI) | (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI) | (1 << PRUSART0) | (1 << PRADC);
     bba:	8f ee       	ldi	r24, 0xEF	; 239
     bbc:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
     bc0:	84 b1       	in	r24, 0x04	; 4
     bc2:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
     bc4:	85 b1       	in	r24, 0x05	; 5
     bc6:	9f ef       	ldi	r25, 0xFF	; 255
     bc8:	95 b9       	out	0x05, r25	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
     bca:	87 b1       	in	r24, 0x07	; 7
     bcc:	80 78       	andi	r24, 0x80	; 128
     bce:	87 b9       	out	0x07, r24	; 7

		PORTC |= mask;
     bd0:	88 b1       	in	r24, 0x08	; 8
     bd2:	8f 67       	ori	r24, 0x7F	; 127
     bd4:	88 b9       	out	0x08, r24	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
     bd6:	8a b1       	in	r24, 0x0a	; 10
     bd8:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
     bda:	8b b1       	in	r24, 0x0b	; 11
     bdc:	9b b9       	out	0x0b, r25	; 11
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
     bde:	40 e0       	ldi	r20, 0x00	; 0
     be0:	60 e8       	ldi	r22, 0x80	; 128
     be2:	81 e6       	ldi	r24, 0x61	; 97
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
     bea:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
     bec:	15 be       	out	0x35, r1	; 53
	sysctrl_init();
	//!!!SPI_0_initialization();

	//!!TIMER_0_initialization();

	USART_0_initialization();
     bee:	0e 94 d6 05 	call	0xbac	; 0xbac <USART_0_initialization>
     bf2:	08 95       	ret

00000bf4 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
     bf4:	2f b7       	in	r18, 0x3f	; 63
	cli
     bf6:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
     bf8:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
     bfa:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
     bfc:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
     bfe:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
     c00:	08 95       	ret

00000c02 <__vector_17>:
{
	SPI_0_desc.cb = f;
}

ISR(SPI_STC_vect)
{
     c02:	1f 92       	push	r1
     c04:	0f 92       	push	r0
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	0f 92       	push	r0
     c0a:	11 24       	eor	r1, r1
     c0c:	2f 93       	push	r18
     c0e:	3f 93       	push	r19
     c10:	4f 93       	push	r20
     c12:	5f 93       	push	r21
     c14:	6f 93       	push	r22
     c16:	7f 93       	push	r23
     c18:	8f 93       	push	r24
     c1a:	9f 93       	push	r25
     c1c:	af 93       	push	r26
     c1e:	bf 93       	push	r27
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
     c24:	ef 93       	push	r30
     c26:	ff 93       	push	r31
	/* SPI_0_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPDR;
     c28:	9e b5       	in	r25, 0x2e	; 46
	uint8_t wdata = 0;

	if (SPI_0_desc.type != SPI_WRITE) {
     c2a:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <SPI_0_desc+0x4>
     c2e:	82 30       	cpi	r24, 0x02	; 2
     c30:	11 f1       	breq	.+68     	; 0xc76 <__vector_17+0x74>
		*SPI_0_desc.data = rdata;
     c32:	ce ed       	ldi	r28, 0xDE	; 222
     c34:	d3 e0       	ldi	r29, 0x03	; 3
     c36:	a9 81       	ldd	r26, Y+1	; 0x01
     c38:	ba 81       	ldd	r27, Y+2	; 0x02
     c3a:	fd 01       	movw	r30, r26
     c3c:	91 93       	st	Z+, r25
	}

	SPI_0_desc.data++;
     c3e:	fa 83       	std	Y+2, r31	; 0x02
     c40:	e9 83       	std	Y+1, r30	; 0x01

	if (SPI_0_desc.type != SPI_READ)
     c42:	81 30       	cpi	r24, 0x01	; 1
     c44:	19 f0       	breq	.+6      	; 0xc4c <__vector_17+0x4a>
		wdata = *SPI_0_desc.data;
     c46:	11 96       	adiw	r26, 0x01	; 1
     c48:	9c 91       	ld	r25, X
     c4a:	01 c0       	rjmp	.+2      	; 0xc4e <__vector_17+0x4c>
	/* SPI_0_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPDR;
	uint8_t wdata = 0;
     c4c:	90 e0       	ldi	r25, 0x00	; 0
	SPI_0_desc.data++;

	if (SPI_0_desc.type != SPI_READ)
		wdata = *SPI_0_desc.data;

	SPI_0_desc.size--;
     c4e:	ee ed       	ldi	r30, 0xDE	; 222
     c50:	f3 e0       	ldi	r31, 0x03	; 3
     c52:	83 81       	ldd	r24, Z+3	; 0x03
     c54:	81 50       	subi	r24, 0x01	; 1
     c56:	83 83       	std	Z+3, r24	; 0x03
	// if more bytes to be transferred
	if (SPI_0_desc.size != 0) {
     c58:	88 23       	and	r24, r24
     c5a:	11 f0       	breq	.+4      	; 0xc60 <__vector_17+0x5e>
		// more data to send, send a byte
		SPDR = wdata;
     c5c:	9e bd       	out	0x2e, r25	; 46
     c5e:	14 c0       	rjmp	.+40     	; 0xc88 <__vector_17+0x86>
	}

	// if last byte has been transferred, update status
	// and optionally call callback
	else {
		SPI_0_desc.status = SPI_DONE;
     c60:	ee ed       	ldi	r30, 0xDE	; 222
     c62:	f3 e0       	ldi	r31, 0x03	; 3
     c64:	83 e0       	ldi	r24, 0x03	; 3
     c66:	80 83       	st	Z, r24
		if (SPI_0_desc.cb != NULL) {
     c68:	05 80       	ldd	r0, Z+5	; 0x05
     c6a:	f6 81       	ldd	r31, Z+6	; 0x06
     c6c:	e0 2d       	mov	r30, r0
     c6e:	30 97       	sbiw	r30, 0x00	; 0
     c70:	59 f0       	breq	.+22     	; 0xc88 <__vector_17+0x86>
			SPI_0_desc.cb();
     c72:	09 95       	icall
		}
	}
}
     c74:	09 c0       	rjmp	.+18     	; 0xc88 <__vector_17+0x86>

	if (SPI_0_desc.type != SPI_WRITE) {
		*SPI_0_desc.data = rdata;
	}

	SPI_0_desc.data++;
     c76:	ee ed       	ldi	r30, 0xDE	; 222
     c78:	f3 e0       	ldi	r31, 0x03	; 3
     c7a:	a1 81       	ldd	r26, Z+1	; 0x01
     c7c:	b2 81       	ldd	r27, Z+2	; 0x02
     c7e:	cd 01       	movw	r24, r26
     c80:	01 96       	adiw	r24, 0x01	; 1
     c82:	92 83       	std	Z+2, r25	; 0x02
     c84:	81 83       	std	Z+1, r24	; 0x01
     c86:	df cf       	rjmp	.-66     	; 0xc46 <__vector_17+0x44>
		SPI_0_desc.status = SPI_DONE;
		if (SPI_0_desc.cb != NULL) {
			SPI_0_desc.cb();
		}
	}
}
     c88:	ff 91       	pop	r31
     c8a:	ef 91       	pop	r30
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	bf 91       	pop	r27
     c92:	af 91       	pop	r26
     c94:	9f 91       	pop	r25
     c96:	8f 91       	pop	r24
     c98:	7f 91       	pop	r23
     c9a:	6f 91       	pop	r22
     c9c:	5f 91       	pop	r21
     c9e:	4f 91       	pop	r20
     ca0:	3f 91       	pop	r19
     ca2:	2f 91       	pop	r18
     ca4:	0f 90       	pop	r0
     ca6:	0f be       	out	0x3f, r0	; 63
     ca8:	0f 90       	pop	r0
     caa:	1f 90       	pop	r1
     cac:	18 95       	reti

00000cae <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(UCSR0A & (1 << RXC0)))
		;
	return UDR0;
}
     cae:	e4 e6       	ldi	r30, 0x64	; 100
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	8d 7f       	andi	r24, 0xFD	; 253
     cb6:	80 83       	st	Z, r24
     cb8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     cbc:	80 e1       	ldi	r24, 0x10	; 16
     cbe:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     cc2:	82 e0       	ldi	r24, 0x02	; 2
     cc4:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     cc8:	88 e9       	ldi	r24, 0x98	; 152
     cca:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	08 95       	ret

00000cd2 <USART_0_write>:

void USART_0_write(const uint8_t data)
{
	while (!(UCSR0A & (1 << UDRE0)))
     cd2:	e0 ec       	ldi	r30, 0xC0	; 192
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	90 81       	ld	r25, Z
     cd8:	95 ff       	sbrs	r25, 5
     cda:	fd cf       	rjmp	.-6      	; 0xcd6 <USART_0_write+0x4>
		;
	UDR0 = data;
     cdc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     ce0:	08 95       	ret

00000ce2 <add_cmd_list>:
cmdptr commands[CMDLISTVAL];

//--------------------------------------------------------------------------------------------------------------------------------

void add_cmd_list(char* command, void (*function)(void))
{
     ce2:	ef 92       	push	r14
     ce4:	ff 92       	push	r15
     ce6:	0f 93       	push	r16
     ce8:	1f 93       	push	r17
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
     cee:	7b 01       	movw	r14, r22

 if (cmdlistidx>=CMDLISTVAL)
     cf0:	c0 91 e5 03 	lds	r28, 0x03E5	; 0x8003e5 <cmdlistidx>
     cf4:	d0 91 e6 03 	lds	r29, 0x03E6	; 0x8003e6 <cmdlistidx+0x1>
     cf8:	c4 31       	cpi	r28, 0x14	; 20
     cfa:	d1 05       	cpc	r29, r1
     cfc:	4c f0       	brlt	.+18     	; 0xd10 <add_cmd_list+0x2e>
 {
    printf ("\r\n-ERR command list overflow!");
     cfe:	8f e1       	ldi	r24, 0x1F	; 31
     d00:	93 e0       	ldi	r25, 0x03	; 3
     d02:	9f 93       	push	r25
     d04:	8f 93       	push	r24
     d06:	0e 94 c1 08 	call	0x1182	; 0x1182 <printf>
    return;
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
     d0e:	1a c0       	rjmp	.+52     	; 0xd44 <add_cmd_list+0x62>
 }

 strcpy(commands[cmdlistidx].command,command);
     d10:	8e 01       	movw	r16, r28
     d12:	00 0f       	add	r16, r16
     d14:	11 1f       	adc	r17, r17
     d16:	98 01       	movw	r18, r16
     d18:	22 0f       	add	r18, r18
     d1a:	33 1f       	adc	r19, r19
     d1c:	22 0f       	add	r18, r18
     d1e:	33 1f       	adc	r19, r19
     d20:	22 0f       	add	r18, r18
     d22:	33 1f       	adc	r19, r19
     d24:	02 0f       	add	r16, r18
     d26:	13 1f       	adc	r17, r19
     d28:	0e 5b       	subi	r16, 0xBE	; 190
     d2a:	1b 4f       	sbci	r17, 0xFB	; 251
     d2c:	bc 01       	movw	r22, r24
     d2e:	c8 01       	movw	r24, r16
     d30:	0e 94 4f 08 	call	0x109e	; 0x109e <strcpy>
 commands[cmdlistidx].function=function;   
     d34:	f8 01       	movw	r30, r16
     d36:	f1 8a       	std	Z+17, r15	; 0x11
     d38:	e0 8a       	std	Z+16, r14	; 0x10
                     
 cmdlistidx++;
     d3a:	21 96       	adiw	r28, 0x01	; 1
     d3c:	d0 93 e6 03 	sts	0x03E6, r29	; 0x8003e6 <cmdlistidx+0x1>
     d40:	c0 93 e5 03 	sts	0x03E5, r28	; 0x8003e5 <cmdlistidx>
 
}
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
     d48:	1f 91       	pop	r17
     d4a:	0f 91       	pop	r16
     d4c:	ff 90       	pop	r15
     d4e:	ef 90       	pop	r14
     d50:	08 95       	ret

00000d52 <init_cmd_list>:

void init_cmd_list(void)
{
     d52:	cf 93       	push	r28
     d54:	df 93       	push	r29
     d56:	c2 e4       	ldi	r28, 0x42	; 66
     d58:	d4 e0       	ldi	r29, 0x04	; 4
     d5a:	2a ea       	ldi	r18, 0xAA	; 170
     d5c:	35 e0       	ldi	r19, 0x05	; 5

    int i=0;

    for (i=0; i<CMDLISTVAL; i++)
    {
       strcpy(commands[i].command,"               ");
     d5e:	80 e1       	ldi	r24, 0x10	; 16
     d60:	ed e3       	ldi	r30, 0x3D	; 61
     d62:	f3 e0       	ldi	r31, 0x03	; 3
     d64:	de 01       	movw	r26, r28
     d66:	01 90       	ld	r0, Z+
     d68:	0d 92       	st	X+, r0
     d6a:	8a 95       	dec	r24
     d6c:	e1 f7       	brne	.-8      	; 0xd66 <init_cmd_list+0x14>
       commands[i].function=NULL;
     d6e:	19 8a       	std	Y+17, r1	; 0x11
     d70:	18 8a       	std	Y+16, r1	; 0x10
     d72:	62 96       	adiw	r28, 0x12	; 18
void init_cmd_list(void)
{

    int i=0;

    for (i=0; i<CMDLISTVAL; i++)
     d74:	c2 17       	cp	r28, r18
     d76:	d3 07       	cpc	r29, r19
     d78:	91 f7       	brne	.-28     	; 0xd5e <init_cmd_list+0xc>
    {
       strcpy(commands[i].command,"               ");
       commands[i].function=NULL;
    }
    
    cmdlistidx=0;
     d7a:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <cmdlistidx+0x1>
     d7e:	10 92 e5 03 	sts	0x03E5, r1	; 0x8003e5 <cmdlistidx>
    
    add_cmd_list("help",help);
     d82:	69 eb       	ldi	r22, 0xB9	; 185
     d84:	70 e0       	ldi	r23, 0x00	; 0
     d86:	8d e4       	ldi	r24, 0x4D	; 77
     d88:	93 e0       	ldi	r25, 0x03	; 3
     d8a:	0e 94 71 06 	call	0xce2	; 0xce2 <add_cmd_list>
	add_cmd_list("reg?",spirit_reg_read);          
     d8e:	61 e0       	ldi	r22, 0x01	; 1
     d90:	71 e0       	ldi	r23, 0x01	; 1
     d92:	82 e5       	ldi	r24, 0x52	; 82
     d94:	93 e0       	ldi	r25, 0x03	; 3
     d96:	0e 94 71 06 	call	0xce2	; 0xce2 <add_cmd_list>
    add_cmd_list("reg",spirit_reg_write);
     d9a:	6b e3       	ldi	r22, 0x3B	; 59
     d9c:	71 e0       	ldi	r23, 0x01	; 1
     d9e:	87 e5       	ldi	r24, 0x57	; 87
     da0:	93 e0       	ldi	r25, 0x03	; 3
     da2:	0e 94 71 06 	call	0xce2	; 0xce2 <add_cmd_list>
    add_cmd_list("cmd",spirit_cmd_write);
     da6:	69 e8       	ldi	r22, 0x89	; 137
     da8:	71 e0       	ldi	r23, 0x01	; 1
     daa:	8b e5       	ldi	r24, 0x5B	; 91
     dac:	93 e0       	ldi	r25, 0x03	; 3
     dae:	0e 94 71 06 	call	0xce2	; 0xce2 <add_cmd_list>
	add_cmd_list("stat?",spirit_status_view);   
     db2:	6d e9       	ldi	r22, 0x9D	; 157
     db4:	71 e0       	ldi	r23, 0x01	; 1
     db6:	8f e5       	ldi	r24, 0x5F	; 95
     db8:	93 e0       	ldi	r25, 0x03	; 3
     dba:	0e 94 71 06 	call	0xce2	; 0xce2 <add_cmd_list>
	add_cmd_list("standby",spirit_command_standby);   
     dbe:	6c ed       	ldi	r22, 0xDC	; 220
     dc0:	72 e0       	ldi	r23, 0x02	; 2
     dc2:	85 e6       	ldi	r24, 0x65	; 101
     dc4:	93 e0       	ldi	r25, 0x03	; 3
     dc6:	0e 94 71 06 	call	0xce2	; 0xce2 <add_cmd_list>
	add_cmd_list("ready",spirit_command_ready);   
     dca:	69 ea       	ldi	r22, 0xA9	; 169
     dcc:	72 e0       	ldi	r23, 0x02	; 2
     dce:	8d e6       	ldi	r24, 0x6D	; 109
     dd0:	93 e0       	ldi	r25, 0x03	; 3
     dd2:	0e 94 71 06 	call	0xce2	; 0xce2 <add_cmd_list>
	add_cmd_list("locktx",spirit_command_lock_tx);   
     dd6:	62 ee       	ldi	r22, 0xE2	; 226
     dd8:	72 e0       	ldi	r23, 0x02	; 2
     dda:	83 e7       	ldi	r24, 0x73	; 115
     ddc:	93 e0       	ldi	r25, 0x03	; 3
     dde:	0e 94 71 06 	call	0xce2	; 0xce2 <add_cmd_list>
	add_cmd_list("lockrx",spirit_command_lock_rx);   
     de2:	65 e1       	ldi	r22, 0x15	; 21
     de4:	73 e0       	ldi	r23, 0x03	; 3
     de6:	8a e7       	ldi	r24, 0x7A	; 122
     de8:	93 e0       	ldi	r25, 0x03	; 3
     dea:	0e 94 71 06 	call	0xce2	; 0xce2 <add_cmd_list>
	add_cmd_list("sleep",spirit_command_sleep);   	
     dee:	68 e4       	ldi	r22, 0x48	; 72
     df0:	73 e0       	ldi	r23, 0x03	; 3
     df2:	81 e8       	ldi	r24, 0x81	; 129
     df4:	93 e0       	ldi	r25, 0x03	; 3
     df6:	0e 94 71 06 	call	0xce2	; 0xce2 <add_cmd_list>
	add_cmd_list("disable",spirit_command_disable);   		   
     dfa:	6e e4       	ldi	r22, 0x4E	; 78
     dfc:	73 e0       	ldi	r23, 0x03	; 3
     dfe:	87 e8       	ldi	r24, 0x87	; 135
     e00:	93 e0       	ldi	r25, 0x03	; 3
     e02:	0e 94 71 06 	call	0xce2	; 0xce2 <add_cmd_list>
	add_cmd_list("enable",spirit_command_enable);   	
     e06:	60 e5       	ldi	r22, 0x50	; 80
     e08:	73 e0       	ldi	r23, 0x03	; 3
     e0a:	8f e8       	ldi	r24, 0x8F	; 143
     e0c:	93 e0       	ldi	r25, 0x03	; 3
     e0e:	0e 94 71 06 	call	0xce2	; 0xce2 <add_cmd_list>
	add_cmd_list("reset",spirit_command_reset);   	
     e12:	62 e5       	ldi	r22, 0x52	; 82
     e14:	73 e0       	ldi	r23, 0x03	; 3
     e16:	86 e9       	ldi	r24, 0x96	; 150
     e18:	93 e0       	ldi	r25, 0x03	; 3
     e1a:	0e 94 71 06 	call	0xce2	; 0xce2 <add_cmd_list>
	add_cmd_list("conf",SpiritBaseConfiguration);   		
     e1e:	68 e5       	ldi	r22, 0x58	; 88
     e20:	73 e0       	ldi	r23, 0x03	; 3
     e22:	8c e9       	ldi	r24, 0x9C	; 156
     e24:	93 e0       	ldi	r25, 0x03	; 3
     e26:	0e 94 71 06 	call	0xce2	; 0xce2 <add_cmd_list>
	add_cmd_list("cal",SpiritVcoCalibration);   		
     e2a:	69 e0       	ldi	r22, 0x09	; 9
     e2c:	74 e0       	ldi	r23, 0x04	; 4
     e2e:	81 ea       	ldi	r24, 0xA1	; 161
     e30:	93 e0       	ldi	r25, 0x03	; 3
     e32:	0e 94 71 06 	call	0xce2	; 0xce2 <add_cmd_list>
    add_cmd_list("cmd",spirit_cmd_write);  
    add_cmd_list("test",spirit_common_test);
    */

    
}
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	08 95       	ret

00000e3c <terminal_init>:

void terminal_init (void)
{
    
  memset(cmdargs,0,sizeof(char*)*10);
     e3c:	84 e1       	ldi	r24, 0x14	; 20
     e3e:	ee e2       	ldi	r30, 0x2E	; 46
     e40:	f4 e0       	ldi	r31, 0x04	; 4
     e42:	df 01       	movw	r26, r30
     e44:	1d 92       	st	X+, r1
     e46:	8a 95       	dec	r24
     e48:	e9 f7       	brne	.-6      	; 0xe44 <terminal_init+0x8>
  argsidx=0;
     e4a:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <argsidx+0x1>
     e4e:	10 92 e7 03 	sts	0x03E7, r1	; 0x8003e7 <argsidx>

  memset(rxbuf,0,64);  
     e52:	80 e4       	ldi	r24, 0x40	; 64
     e54:	ee ee       	ldi	r30, 0xEE	; 238
     e56:	f3 e0       	ldi	r31, 0x03	; 3
     e58:	df 01       	movw	r26, r30
     e5a:	1d 92       	st	X+, r1
     e5c:	8a 95       	dec	r24
     e5e:	e9 f7       	brne	.-6      	; 0xe5a <terminal_init+0x1e>
  rxidx=0;
     e60:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <rxidx+0x1>
     e64:	10 92 e9 03 	sts	0x03E9, r1	; 0x8003e9 <rxidx>
  RXFLAGCLR; 
     e68:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <flags1>
     e6c:	8e 7f       	andi	r24, 0xFE	; 254
     e6e:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <flags1>
  init_cmd_list();
     e72:	0e 94 a9 06 	call	0xd52	; 0xd52 <init_cmd_list>
  printf("\r\n>"); 
     e76:	85 ea       	ldi	r24, 0xA5	; 165
     e78:	93 e0       	ldi	r25, 0x03	; 3
     e7a:	9f 93       	push	r25
     e7c:	8f 93       	push	r24
     e7e:	0e 94 c1 08 	call	0x1182	; 0x1182 <printf>
     
}
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	08 95       	ret

00000e88 <terminal_proc>:

void terminal_proc (char smb)
{
    
   rxbuf[rxidx]=smb;
     e88:	20 91 e9 03 	lds	r18, 0x03E9	; 0x8003e9 <rxidx>
     e8c:	30 91 ea 03 	lds	r19, 0x03EA	; 0x8003ea <rxidx+0x1>
     e90:	f9 01       	movw	r30, r18
     e92:	e2 51       	subi	r30, 0x12	; 18
     e94:	fc 4f       	sbci	r31, 0xFC	; 252
     e96:	80 83       	st	Z, r24
   rxidx++; 
     e98:	2f 5f       	subi	r18, 0xFF	; 255
     e9a:	3f 4f       	sbci	r19, 0xFF	; 255
     e9c:	30 93 ea 03 	sts	0x03EA, r19	; 0x8003ea <rxidx+0x1>
     ea0:	20 93 e9 03 	sts	0x03E9, r18	; 0x8003e9 <rxidx>
   if (smb!=13)  putchar(smb);
     ea4:	8d 30       	cpi	r24, 0x0D	; 13
     ea6:	41 f0       	breq	.+16     	; 0xeb8 <terminal_proc+0x30>
     ea8:	60 91 ac 05 	lds	r22, 0x05AC	; 0x8005ac <__iob+0x2>
     eac:	70 91 ad 05 	lds	r23, 0x05AD	; 0x8005ad <__iob+0x3>
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	0e 94 85 08 	call	0x110a	; 0x110a <fputc>
   if (smb==13) 
   {
		RXFLAGSET;
   }
   
}
     eb6:	08 95       	ret
   rxbuf[rxidx]=smb;
   rxidx++; 
   if (smb!=13)  putchar(smb);
   if (smb==13) 
   {
		RXFLAGSET;
     eb8:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <flags1>
     ebc:	81 60       	ori	r24, 0x01	; 1
     ebe:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <flags1>
     ec2:	08 95       	ret

00000ec4 <terminal_proc_cmd>:
   }
   
}

void terminal_proc_cmd (void)
{
     ec4:	ef 92       	push	r14
     ec6:	ff 92       	push	r15
     ec8:	0f 93       	push	r16
     eca:	1f 93       	push	r17
     ecc:	cf 93       	push	r28
     ece:	df 93       	push	r29

    int i=0;
    char* mnemo=NULL;    
    char* arg=NULL;
    
    rxbuf[rxidx-1]=0;
     ed0:	e0 91 e9 03 	lds	r30, 0x03E9	; 0x8003e9 <rxidx>
     ed4:	f0 91 ea 03 	lds	r31, 0x03EA	; 0x8003ea <rxidx+0x1>
     ed8:	e3 51       	subi	r30, 0x13	; 19
     eda:	fc 4f       	sbci	r31, 0xFC	; 252
     edc:	10 82       	st	Z, r1
    //if (rxidx>1) printf ("\r\n-terminalproc command = %s", rxbuf);
    //terminal_init();  
                    
    mnemo =strtok(rxbuf," ");
     ede:	6b e4       	ldi	r22, 0x4B	; 75
     ee0:	73 e0       	ldi	r23, 0x03	; 3
     ee2:	8e ee       	ldi	r24, 0xEE	; 238
     ee4:	93 e0       	ldi	r25, 0x03	; 3
     ee6:	0e 94 41 08 	call	0x1082	; 0x1082 <strtok>
     eea:	ec 01       	movw	r28, r24
    if (mnemo==NULL) mnemo =strtok(rxbuf,NULL);  
     eec:	00 97       	sbiw	r24, 0x00	; 0
     eee:	09 f0       	breq	.+2      	; 0xef2 <terminal_proc_cmd+0x2e>
     ef0:	8c c0       	rjmp	.+280    	; 0x100a <terminal_proc_cmd+0x146>
     ef2:	60 e0       	ldi	r22, 0x00	; 0
     ef4:	70 e0       	ldi	r23, 0x00	; 0
     ef6:	8e ee       	ldi	r24, 0xEE	; 238
     ef8:	93 e0       	ldi	r25, 0x03	; 3
     efa:	0e 94 41 08 	call	0x1082	; 0x1082 <strtok>
     efe:	ec 01       	movw	r28, r24
      
    //printf("\r\n mnemo=%s",mnemo);
             
    arg=strtok(&rxbuf[strlen(mnemo)+1],",");
     f00:	fc 01       	movw	r30, r24
     f02:	01 90       	ld	r0, Z+
     f04:	00 20       	and	r0, r0
     f06:	e9 f7       	brne	.-6      	; 0xf02 <terminal_proc_cmd+0x3e>
     f08:	cf 01       	movw	r24, r30
     f0a:	8c 1b       	sub	r24, r28
     f0c:	9d 0b       	sbc	r25, r29
     f0e:	69 ea       	ldi	r22, 0xA9	; 169
     f10:	73 e0       	ldi	r23, 0x03	; 3
     f12:	82 51       	subi	r24, 0x12	; 18
     f14:	9c 4f       	sbci	r25, 0xFC	; 252
     f16:	0e 94 41 08 	call	0x1082	; 0x1082 <strtok>
    while(arg)
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	01 f1       	breq	.+64     	; 0xf5e <terminal_proc_cmd+0x9a>
    {
        //printf("\r\n arg=%s",arg);
        cmdargs[argsidx]=arg;
     f1e:	20 91 e7 03 	lds	r18, 0x03E7	; 0x8003e7 <argsidx>
     f22:	30 91 e8 03 	lds	r19, 0x03E8	; 0x8003e8 <argsidx+0x1>
     f26:	f9 01       	movw	r30, r18
     f28:	ee 0f       	add	r30, r30
     f2a:	ff 1f       	adc	r31, r31
     f2c:	e2 5d       	subi	r30, 0xD2	; 210
     f2e:	fb 4f       	sbci	r31, 0xFB	; 251
     f30:	91 83       	std	Z+1, r25	; 0x01
     f32:	80 83       	st	Z, r24
        argsidx++;      
     f34:	2f 5f       	subi	r18, 0xFF	; 255
     f36:	3f 4f       	sbci	r19, 0xFF	; 255
     f38:	30 93 e8 03 	sts	0x03E8, r19	; 0x8003e8 <argsidx+0x1>
     f3c:	20 93 e7 03 	sts	0x03E7, r18	; 0x8003e7 <argsidx>
        arg=strtok(NULL,","); 
     f40:	69 ea       	ldi	r22, 0xA9	; 169
     f42:	73 e0       	ldi	r23, 0x03	; 3
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	0e 94 41 08 	call	0x1082	; 0x1082 <strtok>
        if (argsidx>9) break;
     f4c:	20 91 e7 03 	lds	r18, 0x03E7	; 0x8003e7 <argsidx>
     f50:	30 91 e8 03 	lds	r19, 0x03E8	; 0x8003e8 <argsidx+0x1>
     f54:	2a 30       	cpi	r18, 0x0A	; 10
     f56:	31 05       	cpc	r19, r1
     f58:	14 f4       	brge	.+4      	; 0xf5e <terminal_proc_cmd+0x9a>
    if (mnemo==NULL) mnemo =strtok(rxbuf,NULL);  
      
    //printf("\r\n mnemo=%s",mnemo);
             
    arg=strtok(&rxbuf[strlen(mnemo)+1],",");
    while(arg)
     f5a:	00 97       	sbiw	r24, 0x00	; 0
     f5c:	01 f7       	brne	.-64     	; 0xf1e <terminal_proc_cmd+0x5a>
        arg=strtok(NULL,","); 
        if (argsidx>9) break;
    }
    
    
    if ((mnemo==NULL)&&(rxidx>1)) printf ("\r\n-ERR bad command!");
     f5e:	20 97       	sbiw	r28, 0x00	; 0
     f60:	09 f0       	breq	.+2      	; 0xf64 <terminal_proc_cmd+0xa0>
     f62:	44 c0       	rjmp	.+136    	; 0xfec <terminal_proc_cmd+0x128>
     f64:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <rxidx>
     f68:	90 91 ea 03 	lds	r25, 0x03EA	; 0x8003ea <rxidx+0x1>
     f6c:	02 97       	sbiw	r24, 0x02	; 2
     f6e:	d8 f1       	brcs	.+118    	; 0xfe6 <terminal_proc_cmd+0x122>
     f70:	8b ea       	ldi	r24, 0xAB	; 171
     f72:	93 e0       	ldi	r25, 0x03	; 3
     f74:	9f 93       	push	r25
     f76:	8f 93       	push	r24
     f78:	0e 94 c1 08 	call	0x1182	; 0x1182 <printf>
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	32 c0       	rjmp	.+100    	; 0xfe6 <terminal_proc_cmd+0x122>
        if (rxidx>1)
        {
            for (i=0; i<CMDLISTVAL; i++)
            {
                //if (strstr(mnemo,commands[i].command))   
                if (strcmp(mnemo,commands[i].command)==0)
     f82:	b7 01       	movw	r22, r14
     f84:	ce 01       	movw	r24, r28
     f86:	0e 94 46 08 	call	0x108c	; 0x108c <strcmp>
     f8a:	89 2b       	or	r24, r25
     f8c:	b1 f4       	brne	.+44     	; 0xfba <terminal_proc_cmd+0xf6>
                {
                     (commands[i].function)();  
     f8e:	f8 01       	movw	r30, r16
     f90:	ee 0f       	add	r30, r30
     f92:	ff 1f       	adc	r31, r31
     f94:	cf 01       	movw	r24, r30
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	e8 0f       	add	r30, r24
     fa4:	f9 1f       	adc	r31, r25
     fa6:	ee 5b       	subi	r30, 0xBE	; 190
     fa8:	fb 4f       	sbci	r31, 0xFB	; 251
     faa:	00 88       	ldd	r0, Z+16	; 0x10
     fac:	f1 89       	ldd	r31, Z+17	; 0x11
     fae:	e0 2d       	mov	r30, r0
     fb0:	09 95       	icall
                }
            } 
        } 
    } 
                      
    if (i==CMDLISTVAL)
     fb2:	04 31       	cpi	r16, 0x14	; 20
     fb4:	11 05       	cpc	r17, r1
     fb6:	b9 f4       	brne	.+46     	; 0xfe6 <terminal_proc_cmd+0x122>
     fb8:	08 c0       	rjmp	.+16     	; 0xfca <terminal_proc_cmd+0x106>
    if ((mnemo==NULL)&&(rxidx>1)) printf ("\r\n-ERR bad command!");
    else
    {
        if (rxidx>1)
        {
            for (i=0; i<CMDLISTVAL; i++)
     fba:	0f 5f       	subi	r16, 0xFF	; 255
     fbc:	1f 4f       	sbci	r17, 0xFF	; 255
     fbe:	82 e1       	ldi	r24, 0x12	; 18
     fc0:	e8 0e       	add	r14, r24
     fc2:	f1 1c       	adc	r15, r1
     fc4:	04 31       	cpi	r16, 0x14	; 20
     fc6:	11 05       	cpc	r17, r1
     fc8:	e1 f6       	brne	.-72     	; 0xf82 <terminal_proc_cmd+0xbe>
        } 
    } 
                      
    if (i==CMDLISTVAL)
    {
        if (mnemo!=NULL) printf ("\r\n-ERR unknown comand [%s]!",rxbuf);    
     fca:	8e ee       	ldi	r24, 0xEE	; 238
     fcc:	93 e0       	ldi	r25, 0x03	; 3
     fce:	9f 93       	push	r25
     fd0:	8f 93       	push	r24
     fd2:	8f eb       	ldi	r24, 0xBF	; 191
     fd4:	93 e0       	ldi	r25, 0x03	; 3
     fd6:	9f 93       	push	r25
     fd8:	8f 93       	push	r24
     fda:	0e 94 c1 08 	call	0x1182	; 0x1182 <printf>
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
    } 
		
    terminal_init ();
     fe6:	0e 94 1e 07 	call	0xe3c	; 0xe3c <terminal_init>

}
     fea:	20 c0       	rjmp	.+64     	; 0x102c <terminal_proc_cmd+0x168>
    
    
    if ((mnemo==NULL)&&(rxidx>1)) printf ("\r\n-ERR bad command!");
    else
    {
        if (rxidx>1)
     fec:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <rxidx>
     ff0:	90 91 ea 03 	lds	r25, 0x03EA	; 0x8003ea <rxidx+0x1>
     ff4:	02 97       	sbiw	r24, 0x02	; 2
     ff6:	b8 f3       	brcs	.-18     	; 0xfe6 <terminal_proc_cmd+0x122>
     ff8:	0f 2e       	mov	r0, r31
     ffa:	f2 e4       	ldi	r31, 0x42	; 66
     ffc:	ef 2e       	mov	r14, r31
     ffe:	f4 e0       	ldi	r31, 0x04	; 4
    1000:	ff 2e       	mov	r15, r31
    1002:	f0 2d       	mov	r31, r0
    1004:	00 e0       	ldi	r16, 0x00	; 0
    1006:	10 e0       	ldi	r17, 0x00	; 0
    1008:	bc cf       	rjmp	.-136    	; 0xf82 <terminal_proc_cmd+0xbe>
    mnemo =strtok(rxbuf," ");
    if (mnemo==NULL) mnemo =strtok(rxbuf,NULL);  
      
    //printf("\r\n mnemo=%s",mnemo);
             
    arg=strtok(&rxbuf[strlen(mnemo)+1],",");
    100a:	fc 01       	movw	r30, r24
    100c:	01 90       	ld	r0, Z+
    100e:	00 20       	and	r0, r0
    1010:	e9 f7       	brne	.-6      	; 0x100c <terminal_proc_cmd+0x148>
    1012:	cf 01       	movw	r24, r30
    1014:	8c 1b       	sub	r24, r28
    1016:	9d 0b       	sbc	r25, r29
    1018:	69 ea       	ldi	r22, 0xA9	; 169
    101a:	73 e0       	ldi	r23, 0x03	; 3
    101c:	82 51       	subi	r24, 0x12	; 18
    101e:	9c 4f       	sbci	r25, 0xFC	; 252
    1020:	0e 94 41 08 	call	0x1082	; 0x1082 <strtok>
    while(arg)
    1024:	00 97       	sbiw	r24, 0x00	; 0
    1026:	09 f0       	breq	.+2      	; 0x102a <terminal_proc_cmd+0x166>
    1028:	7a cf       	rjmp	.-268    	; 0xf1e <terminal_proc_cmd+0x5a>
    102a:	e0 cf       	rjmp	.-64     	; 0xfec <terminal_proc_cmd+0x128>
        if (mnemo!=NULL) printf ("\r\n-ERR unknown comand [%s]!",rxbuf);    
    } 
		
    terminal_init ();

}
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	1f 91       	pop	r17
    1032:	0f 91       	pop	r16
    1034:	ff 90       	pop	r15
    1036:	ef 90       	pop	r14
    1038:	08 95       	ret

0000103a <__tablejump2__>:
    103a:	ee 0f       	add	r30, r30
    103c:	ff 1f       	adc	r31, r31
    103e:	05 90       	lpm	r0, Z+
    1040:	f4 91       	lpm	r31, Z
    1042:	e0 2d       	mov	r30, r0
    1044:	09 94       	ijmp

00001046 <atoi>:
    1046:	fc 01       	movw	r30, r24
    1048:	88 27       	eor	r24, r24
    104a:	99 27       	eor	r25, r25
    104c:	e8 94       	clt
    104e:	21 91       	ld	r18, Z+
    1050:	20 32       	cpi	r18, 0x20	; 32
    1052:	e9 f3       	breq	.-6      	; 0x104e <atoi+0x8>
    1054:	29 30       	cpi	r18, 0x09	; 9
    1056:	10 f0       	brcs	.+4      	; 0x105c <atoi+0x16>
    1058:	2e 30       	cpi	r18, 0x0E	; 14
    105a:	c8 f3       	brcs	.-14     	; 0x104e <atoi+0x8>
    105c:	2b 32       	cpi	r18, 0x2B	; 43
    105e:	41 f0       	breq	.+16     	; 0x1070 <atoi+0x2a>
    1060:	2d 32       	cpi	r18, 0x2D	; 45
    1062:	39 f4       	brne	.+14     	; 0x1072 <atoi+0x2c>
    1064:	68 94       	set
    1066:	04 c0       	rjmp	.+8      	; 0x1070 <atoi+0x2a>
    1068:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__mulhi_const_10>
    106c:	82 0f       	add	r24, r18
    106e:	91 1d       	adc	r25, r1
    1070:	21 91       	ld	r18, Z+
    1072:	20 53       	subi	r18, 0x30	; 48
    1074:	2a 30       	cpi	r18, 0x0A	; 10
    1076:	c0 f3       	brcs	.-16     	; 0x1068 <atoi+0x22>
    1078:	1e f4       	brtc	.+6      	; 0x1080 <atoi+0x3a>
    107a:	90 95       	com	r25
    107c:	81 95       	neg	r24
    107e:	9f 4f       	sbci	r25, 0xFF	; 255
    1080:	08 95       	ret

00001082 <strtok>:
    1082:	4c ed       	ldi	r20, 0xDC	; 220
    1084:	53 e0       	ldi	r21, 0x03	; 3
    1086:	0e 94 56 08 	call	0x10ac	; 0x10ac <strtok_r>
    108a:	08 95       	ret

0000108c <strcmp>:
    108c:	fb 01       	movw	r30, r22
    108e:	dc 01       	movw	r26, r24
    1090:	8d 91       	ld	r24, X+
    1092:	01 90       	ld	r0, Z+
    1094:	80 19       	sub	r24, r0
    1096:	01 10       	cpse	r0, r1
    1098:	d9 f3       	breq	.-10     	; 0x1090 <strcmp+0x4>
    109a:	99 0b       	sbc	r25, r25
    109c:	08 95       	ret

0000109e <strcpy>:
    109e:	fb 01       	movw	r30, r22
    10a0:	dc 01       	movw	r26, r24
    10a2:	01 90       	ld	r0, Z+
    10a4:	0d 92       	st	X+, r0
    10a6:	00 20       	and	r0, r0
    10a8:	e1 f7       	brne	.-8      	; 0x10a2 <strcpy+0x4>
    10aa:	08 95       	ret

000010ac <strtok_r>:
    10ac:	fa 01       	movw	r30, r20
    10ae:	a1 91       	ld	r26, Z+
    10b0:	b0 81       	ld	r27, Z
    10b2:	00 97       	sbiw	r24, 0x00	; 0
    10b4:	19 f4       	brne	.+6      	; 0x10bc <strtok_r+0x10>
    10b6:	10 97       	sbiw	r26, 0x00	; 0
    10b8:	e1 f0       	breq	.+56     	; 0x10f2 <strtok_r+0x46>
    10ba:	cd 01       	movw	r24, r26
    10bc:	dc 01       	movw	r26, r24
    10be:	cd 01       	movw	r24, r26
    10c0:	0d 90       	ld	r0, X+
    10c2:	00 20       	and	r0, r0
    10c4:	11 f4       	brne	.+4      	; 0x10ca <strtok_r+0x1e>
    10c6:	c0 01       	movw	r24, r0
    10c8:	13 c0       	rjmp	.+38     	; 0x10f0 <strtok_r+0x44>
    10ca:	fb 01       	movw	r30, r22
    10cc:	21 91       	ld	r18, Z+
    10ce:	22 23       	and	r18, r18
    10d0:	19 f0       	breq	.+6      	; 0x10d8 <strtok_r+0x2c>
    10d2:	20 15       	cp	r18, r0
    10d4:	d9 f7       	brne	.-10     	; 0x10cc <strtok_r+0x20>
    10d6:	f3 cf       	rjmp	.-26     	; 0x10be <strtok_r+0x12>
    10d8:	fb 01       	movw	r30, r22
    10da:	21 91       	ld	r18, Z+
    10dc:	20 15       	cp	r18, r0
    10de:	19 f4       	brne	.+6      	; 0x10e6 <strtok_r+0x3a>
    10e0:	1e 92       	st	-X, r1
    10e2:	11 96       	adiw	r26, 0x01	; 1
    10e4:	06 c0       	rjmp	.+12     	; 0x10f2 <strtok_r+0x46>
    10e6:	22 23       	and	r18, r18
    10e8:	c1 f7       	brne	.-16     	; 0x10da <strtok_r+0x2e>
    10ea:	0d 90       	ld	r0, X+
    10ec:	00 20       	and	r0, r0
    10ee:	a1 f7       	brne	.-24     	; 0x10d8 <strtok_r+0x2c>
    10f0:	d0 01       	movw	r26, r0
    10f2:	fa 01       	movw	r30, r20
    10f4:	a1 93       	st	Z+, r26
    10f6:	b0 83       	st	Z, r27
    10f8:	08 95       	ret

000010fa <__mulhi_const_10>:
    10fa:	7a e0       	ldi	r23, 0x0A	; 10
    10fc:	97 9f       	mul	r25, r23
    10fe:	90 2d       	mov	r25, r0
    1100:	87 9f       	mul	r24, r23
    1102:	80 2d       	mov	r24, r0
    1104:	91 0d       	add	r25, r1
    1106:	11 24       	eor	r1, r1
    1108:	08 95       	ret

0000110a <fputc>:
    110a:	0f 93       	push	r16
    110c:	1f 93       	push	r17
    110e:	cf 93       	push	r28
    1110:	df 93       	push	r29
    1112:	fb 01       	movw	r30, r22
    1114:	23 81       	ldd	r18, Z+3	; 0x03
    1116:	21 fd       	sbrc	r18, 1
    1118:	03 c0       	rjmp	.+6      	; 0x1120 <fputc+0x16>
    111a:	8f ef       	ldi	r24, 0xFF	; 255
    111c:	9f ef       	ldi	r25, 0xFF	; 255
    111e:	2c c0       	rjmp	.+88     	; 0x1178 <fputc+0x6e>
    1120:	22 ff       	sbrs	r18, 2
    1122:	16 c0       	rjmp	.+44     	; 0x1150 <fputc+0x46>
    1124:	46 81       	ldd	r20, Z+6	; 0x06
    1126:	57 81       	ldd	r21, Z+7	; 0x07
    1128:	24 81       	ldd	r18, Z+4	; 0x04
    112a:	35 81       	ldd	r19, Z+5	; 0x05
    112c:	42 17       	cp	r20, r18
    112e:	53 07       	cpc	r21, r19
    1130:	44 f4       	brge	.+16     	; 0x1142 <fputc+0x38>
    1132:	a0 81       	ld	r26, Z
    1134:	b1 81       	ldd	r27, Z+1	; 0x01
    1136:	9d 01       	movw	r18, r26
    1138:	2f 5f       	subi	r18, 0xFF	; 255
    113a:	3f 4f       	sbci	r19, 0xFF	; 255
    113c:	31 83       	std	Z+1, r19	; 0x01
    113e:	20 83       	st	Z, r18
    1140:	8c 93       	st	X, r24
    1142:	26 81       	ldd	r18, Z+6	; 0x06
    1144:	37 81       	ldd	r19, Z+7	; 0x07
    1146:	2f 5f       	subi	r18, 0xFF	; 255
    1148:	3f 4f       	sbci	r19, 0xFF	; 255
    114a:	37 83       	std	Z+7, r19	; 0x07
    114c:	26 83       	std	Z+6, r18	; 0x06
    114e:	14 c0       	rjmp	.+40     	; 0x1178 <fputc+0x6e>
    1150:	8b 01       	movw	r16, r22
    1152:	ec 01       	movw	r28, r24
    1154:	fb 01       	movw	r30, r22
    1156:	00 84       	ldd	r0, Z+8	; 0x08
    1158:	f1 85       	ldd	r31, Z+9	; 0x09
    115a:	e0 2d       	mov	r30, r0
    115c:	09 95       	icall
    115e:	89 2b       	or	r24, r25
    1160:	e1 f6       	brne	.-72     	; 0x111a <fputc+0x10>
    1162:	d8 01       	movw	r26, r16
    1164:	16 96       	adiw	r26, 0x06	; 6
    1166:	8d 91       	ld	r24, X+
    1168:	9c 91       	ld	r25, X
    116a:	17 97       	sbiw	r26, 0x07	; 7
    116c:	01 96       	adiw	r24, 0x01	; 1
    116e:	17 96       	adiw	r26, 0x07	; 7
    1170:	9c 93       	st	X, r25
    1172:	8e 93       	st	-X, r24
    1174:	16 97       	sbiw	r26, 0x06	; 6
    1176:	ce 01       	movw	r24, r28
    1178:	df 91       	pop	r29
    117a:	cf 91       	pop	r28
    117c:	1f 91       	pop	r17
    117e:	0f 91       	pop	r16
    1180:	08 95       	ret

00001182 <printf>:
    1182:	a0 e0       	ldi	r26, 0x00	; 0
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	e7 ec       	ldi	r30, 0xC7	; 199
    1188:	f8 e0       	ldi	r31, 0x08	; 8
    118a:	0c 94 70 0e 	jmp	0x1ce0	; 0x1ce0 <__prologue_saves__+0x20>
    118e:	ae 01       	movw	r20, r28
    1190:	4b 5f       	subi	r20, 0xFB	; 251
    1192:	5f 4f       	sbci	r21, 0xFF	; 255
    1194:	fa 01       	movw	r30, r20
    1196:	61 91       	ld	r22, Z+
    1198:	71 91       	ld	r23, Z+
    119a:	af 01       	movw	r20, r30
    119c:	80 91 ac 05 	lds	r24, 0x05AC	; 0x8005ac <__iob+0x2>
    11a0:	90 91 ad 05 	lds	r25, 0x05AD	; 0x8005ad <__iob+0x3>
    11a4:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <vfprintf>
    11a8:	e2 e0       	ldi	r30, 0x02	; 2
    11aa:	0c 94 8c 0e 	jmp	0x1d18	; 0x1d18 <__epilogue_restores__+0x20>

000011ae <sscanf>:
    11ae:	ae e0       	ldi	r26, 0x0E	; 14
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	ed ed       	ldi	r30, 0xDD	; 221
    11b4:	f8 e0       	ldi	r31, 0x08	; 8
    11b6:	0c 94 70 0e 	jmp	0x1ce0	; 0x1ce0 <__prologue_saves__+0x20>
    11ba:	85 e0       	ldi	r24, 0x05	; 5
    11bc:	8c 83       	std	Y+4, r24	; 0x04
    11be:	8b 89       	ldd	r24, Y+19	; 0x13
    11c0:	9c 89       	ldd	r25, Y+20	; 0x14
    11c2:	9a 83       	std	Y+2, r25	; 0x02
    11c4:	89 83       	std	Y+1, r24	; 0x01
    11c6:	ae 01       	movw	r20, r28
    11c8:	49 5e       	subi	r20, 0xE9	; 233
    11ca:	5f 4f       	sbci	r21, 0xFF	; 255
    11cc:	6d 89       	ldd	r22, Y+21	; 0x15
    11ce:	7e 89       	ldd	r23, Y+22	; 0x16
    11d0:	ce 01       	movw	r24, r28
    11d2:	01 96       	adiw	r24, 0x01	; 1
    11d4:	0e 94 6d 0c 	call	0x18da	; 0x18da <vfscanf>
    11d8:	2e 96       	adiw	r28, 0x0e	; 14
    11da:	e2 e0       	ldi	r30, 0x02	; 2
    11dc:	0c 94 8c 0e 	jmp	0x1d18	; 0x1d18 <__epilogue_restores__+0x20>

000011e0 <vfprintf>:
    11e0:	ab e0       	ldi	r26, 0x0B	; 11
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	e6 ef       	ldi	r30, 0xF6	; 246
    11e6:	f8 e0       	ldi	r31, 0x08	; 8
    11e8:	0c 94 60 0e 	jmp	0x1cc0	; 0x1cc0 <__prologue_saves__>
    11ec:	6c 01       	movw	r12, r24
    11ee:	7b 01       	movw	r14, r22
    11f0:	8a 01       	movw	r16, r20
    11f2:	fc 01       	movw	r30, r24
    11f4:	17 82       	std	Z+7, r1	; 0x07
    11f6:	16 82       	std	Z+6, r1	; 0x06
    11f8:	83 81       	ldd	r24, Z+3	; 0x03
    11fa:	81 ff       	sbrs	r24, 1
    11fc:	cc c1       	rjmp	.+920    	; 0x1596 <vfprintf+0x3b6>
    11fe:	ce 01       	movw	r24, r28
    1200:	01 96       	adiw	r24, 0x01	; 1
    1202:	3c 01       	movw	r6, r24
    1204:	f6 01       	movw	r30, r12
    1206:	93 81       	ldd	r25, Z+3	; 0x03
    1208:	f7 01       	movw	r30, r14
    120a:	93 fd       	sbrc	r25, 3
    120c:	85 91       	lpm	r24, Z+
    120e:	93 ff       	sbrs	r25, 3
    1210:	81 91       	ld	r24, Z+
    1212:	7f 01       	movw	r14, r30
    1214:	88 23       	and	r24, r24
    1216:	09 f4       	brne	.+2      	; 0x121a <vfprintf+0x3a>
    1218:	ba c1       	rjmp	.+884    	; 0x158e <vfprintf+0x3ae>
    121a:	85 32       	cpi	r24, 0x25	; 37
    121c:	39 f4       	brne	.+14     	; 0x122c <vfprintf+0x4c>
    121e:	93 fd       	sbrc	r25, 3
    1220:	85 91       	lpm	r24, Z+
    1222:	93 ff       	sbrs	r25, 3
    1224:	81 91       	ld	r24, Z+
    1226:	7f 01       	movw	r14, r30
    1228:	85 32       	cpi	r24, 0x25	; 37
    122a:	29 f4       	brne	.+10     	; 0x1236 <vfprintf+0x56>
    122c:	b6 01       	movw	r22, r12
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	0e 94 85 08 	call	0x110a	; 0x110a <fputc>
    1234:	e7 cf       	rjmp	.-50     	; 0x1204 <vfprintf+0x24>
    1236:	91 2c       	mov	r9, r1
    1238:	21 2c       	mov	r2, r1
    123a:	31 2c       	mov	r3, r1
    123c:	ff e1       	ldi	r31, 0x1F	; 31
    123e:	f3 15       	cp	r31, r3
    1240:	d8 f0       	brcs	.+54     	; 0x1278 <vfprintf+0x98>
    1242:	8b 32       	cpi	r24, 0x2B	; 43
    1244:	79 f0       	breq	.+30     	; 0x1264 <vfprintf+0x84>
    1246:	38 f4       	brcc	.+14     	; 0x1256 <vfprintf+0x76>
    1248:	80 32       	cpi	r24, 0x20	; 32
    124a:	79 f0       	breq	.+30     	; 0x126a <vfprintf+0x8a>
    124c:	83 32       	cpi	r24, 0x23	; 35
    124e:	a1 f4       	brne	.+40     	; 0x1278 <vfprintf+0x98>
    1250:	23 2d       	mov	r18, r3
    1252:	20 61       	ori	r18, 0x10	; 16
    1254:	1d c0       	rjmp	.+58     	; 0x1290 <vfprintf+0xb0>
    1256:	8d 32       	cpi	r24, 0x2D	; 45
    1258:	61 f0       	breq	.+24     	; 0x1272 <vfprintf+0x92>
    125a:	80 33       	cpi	r24, 0x30	; 48
    125c:	69 f4       	brne	.+26     	; 0x1278 <vfprintf+0x98>
    125e:	23 2d       	mov	r18, r3
    1260:	21 60       	ori	r18, 0x01	; 1
    1262:	16 c0       	rjmp	.+44     	; 0x1290 <vfprintf+0xb0>
    1264:	83 2d       	mov	r24, r3
    1266:	82 60       	ori	r24, 0x02	; 2
    1268:	38 2e       	mov	r3, r24
    126a:	e3 2d       	mov	r30, r3
    126c:	e4 60       	ori	r30, 0x04	; 4
    126e:	3e 2e       	mov	r3, r30
    1270:	2a c0       	rjmp	.+84     	; 0x12c6 <vfprintf+0xe6>
    1272:	f3 2d       	mov	r31, r3
    1274:	f8 60       	ori	r31, 0x08	; 8
    1276:	1d c0       	rjmp	.+58     	; 0x12b2 <vfprintf+0xd2>
    1278:	37 fc       	sbrc	r3, 7
    127a:	2d c0       	rjmp	.+90     	; 0x12d6 <vfprintf+0xf6>
    127c:	20 ed       	ldi	r18, 0xD0	; 208
    127e:	28 0f       	add	r18, r24
    1280:	2a 30       	cpi	r18, 0x0A	; 10
    1282:	40 f0       	brcs	.+16     	; 0x1294 <vfprintf+0xb4>
    1284:	8e 32       	cpi	r24, 0x2E	; 46
    1286:	b9 f4       	brne	.+46     	; 0x12b6 <vfprintf+0xd6>
    1288:	36 fc       	sbrc	r3, 6
    128a:	81 c1       	rjmp	.+770    	; 0x158e <vfprintf+0x3ae>
    128c:	23 2d       	mov	r18, r3
    128e:	20 64       	ori	r18, 0x40	; 64
    1290:	32 2e       	mov	r3, r18
    1292:	19 c0       	rjmp	.+50     	; 0x12c6 <vfprintf+0xe6>
    1294:	36 fe       	sbrs	r3, 6
    1296:	06 c0       	rjmp	.+12     	; 0x12a4 <vfprintf+0xc4>
    1298:	8a e0       	ldi	r24, 0x0A	; 10
    129a:	98 9e       	mul	r9, r24
    129c:	20 0d       	add	r18, r0
    129e:	11 24       	eor	r1, r1
    12a0:	92 2e       	mov	r9, r18
    12a2:	11 c0       	rjmp	.+34     	; 0x12c6 <vfprintf+0xe6>
    12a4:	ea e0       	ldi	r30, 0x0A	; 10
    12a6:	2e 9e       	mul	r2, r30
    12a8:	20 0d       	add	r18, r0
    12aa:	11 24       	eor	r1, r1
    12ac:	22 2e       	mov	r2, r18
    12ae:	f3 2d       	mov	r31, r3
    12b0:	f0 62       	ori	r31, 0x20	; 32
    12b2:	3f 2e       	mov	r3, r31
    12b4:	08 c0       	rjmp	.+16     	; 0x12c6 <vfprintf+0xe6>
    12b6:	8c 36       	cpi	r24, 0x6C	; 108
    12b8:	21 f4       	brne	.+8      	; 0x12c2 <vfprintf+0xe2>
    12ba:	83 2d       	mov	r24, r3
    12bc:	80 68       	ori	r24, 0x80	; 128
    12be:	38 2e       	mov	r3, r24
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <vfprintf+0xe6>
    12c2:	88 36       	cpi	r24, 0x68	; 104
    12c4:	41 f4       	brne	.+16     	; 0x12d6 <vfprintf+0xf6>
    12c6:	f7 01       	movw	r30, r14
    12c8:	93 fd       	sbrc	r25, 3
    12ca:	85 91       	lpm	r24, Z+
    12cc:	93 ff       	sbrs	r25, 3
    12ce:	81 91       	ld	r24, Z+
    12d0:	7f 01       	movw	r14, r30
    12d2:	81 11       	cpse	r24, r1
    12d4:	b3 cf       	rjmp	.-154    	; 0x123c <vfprintf+0x5c>
    12d6:	98 2f       	mov	r25, r24
    12d8:	9f 7d       	andi	r25, 0xDF	; 223
    12da:	95 54       	subi	r25, 0x45	; 69
    12dc:	93 30       	cpi	r25, 0x03	; 3
    12de:	28 f4       	brcc	.+10     	; 0x12ea <vfprintf+0x10a>
    12e0:	0c 5f       	subi	r16, 0xFC	; 252
    12e2:	1f 4f       	sbci	r17, 0xFF	; 255
    12e4:	9f e3       	ldi	r25, 0x3F	; 63
    12e6:	99 83       	std	Y+1, r25	; 0x01
    12e8:	0d c0       	rjmp	.+26     	; 0x1304 <vfprintf+0x124>
    12ea:	83 36       	cpi	r24, 0x63	; 99
    12ec:	31 f0       	breq	.+12     	; 0x12fa <vfprintf+0x11a>
    12ee:	83 37       	cpi	r24, 0x73	; 115
    12f0:	71 f0       	breq	.+28     	; 0x130e <vfprintf+0x12e>
    12f2:	83 35       	cpi	r24, 0x53	; 83
    12f4:	09 f0       	breq	.+2      	; 0x12f8 <vfprintf+0x118>
    12f6:	59 c0       	rjmp	.+178    	; 0x13aa <vfprintf+0x1ca>
    12f8:	21 c0       	rjmp	.+66     	; 0x133c <vfprintf+0x15c>
    12fa:	f8 01       	movw	r30, r16
    12fc:	80 81       	ld	r24, Z
    12fe:	89 83       	std	Y+1, r24	; 0x01
    1300:	0e 5f       	subi	r16, 0xFE	; 254
    1302:	1f 4f       	sbci	r17, 0xFF	; 255
    1304:	88 24       	eor	r8, r8
    1306:	83 94       	inc	r8
    1308:	91 2c       	mov	r9, r1
    130a:	53 01       	movw	r10, r6
    130c:	13 c0       	rjmp	.+38     	; 0x1334 <vfprintf+0x154>
    130e:	28 01       	movw	r4, r16
    1310:	f2 e0       	ldi	r31, 0x02	; 2
    1312:	4f 0e       	add	r4, r31
    1314:	51 1c       	adc	r5, r1
    1316:	f8 01       	movw	r30, r16
    1318:	a0 80       	ld	r10, Z
    131a:	b1 80       	ldd	r11, Z+1	; 0x01
    131c:	36 fe       	sbrs	r3, 6
    131e:	03 c0       	rjmp	.+6      	; 0x1326 <vfprintf+0x146>
    1320:	69 2d       	mov	r22, r9
    1322:	70 e0       	ldi	r23, 0x00	; 0
    1324:	02 c0       	rjmp	.+4      	; 0x132a <vfprintf+0x14a>
    1326:	6f ef       	ldi	r22, 0xFF	; 255
    1328:	7f ef       	ldi	r23, 0xFF	; 255
    132a:	c5 01       	movw	r24, r10
    132c:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <strnlen>
    1330:	4c 01       	movw	r8, r24
    1332:	82 01       	movw	r16, r4
    1334:	f3 2d       	mov	r31, r3
    1336:	ff 77       	andi	r31, 0x7F	; 127
    1338:	3f 2e       	mov	r3, r31
    133a:	16 c0       	rjmp	.+44     	; 0x1368 <vfprintf+0x188>
    133c:	28 01       	movw	r4, r16
    133e:	22 e0       	ldi	r18, 0x02	; 2
    1340:	42 0e       	add	r4, r18
    1342:	51 1c       	adc	r5, r1
    1344:	f8 01       	movw	r30, r16
    1346:	a0 80       	ld	r10, Z
    1348:	b1 80       	ldd	r11, Z+1	; 0x01
    134a:	36 fe       	sbrs	r3, 6
    134c:	03 c0       	rjmp	.+6      	; 0x1354 <vfprintf+0x174>
    134e:	69 2d       	mov	r22, r9
    1350:	70 e0       	ldi	r23, 0x00	; 0
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <vfprintf+0x178>
    1354:	6f ef       	ldi	r22, 0xFF	; 255
    1356:	7f ef       	ldi	r23, 0xFF	; 255
    1358:	c5 01       	movw	r24, r10
    135a:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <strnlen_P>
    135e:	4c 01       	movw	r8, r24
    1360:	f3 2d       	mov	r31, r3
    1362:	f0 68       	ori	r31, 0x80	; 128
    1364:	3f 2e       	mov	r3, r31
    1366:	82 01       	movw	r16, r4
    1368:	33 fc       	sbrc	r3, 3
    136a:	1b c0       	rjmp	.+54     	; 0x13a2 <vfprintf+0x1c2>
    136c:	82 2d       	mov	r24, r2
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	88 16       	cp	r8, r24
    1372:	99 06       	cpc	r9, r25
    1374:	b0 f4       	brcc	.+44     	; 0x13a2 <vfprintf+0x1c2>
    1376:	b6 01       	movw	r22, r12
    1378:	80 e2       	ldi	r24, 0x20	; 32
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	0e 94 85 08 	call	0x110a	; 0x110a <fputc>
    1380:	2a 94       	dec	r2
    1382:	f4 cf       	rjmp	.-24     	; 0x136c <vfprintf+0x18c>
    1384:	f5 01       	movw	r30, r10
    1386:	37 fc       	sbrc	r3, 7
    1388:	85 91       	lpm	r24, Z+
    138a:	37 fe       	sbrs	r3, 7
    138c:	81 91       	ld	r24, Z+
    138e:	5f 01       	movw	r10, r30
    1390:	b6 01       	movw	r22, r12
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	0e 94 85 08 	call	0x110a	; 0x110a <fputc>
    1398:	21 10       	cpse	r2, r1
    139a:	2a 94       	dec	r2
    139c:	21 e0       	ldi	r18, 0x01	; 1
    139e:	82 1a       	sub	r8, r18
    13a0:	91 08       	sbc	r9, r1
    13a2:	81 14       	cp	r8, r1
    13a4:	91 04       	cpc	r9, r1
    13a6:	71 f7       	brne	.-36     	; 0x1384 <vfprintf+0x1a4>
    13a8:	e8 c0       	rjmp	.+464    	; 0x157a <vfprintf+0x39a>
    13aa:	84 36       	cpi	r24, 0x64	; 100
    13ac:	11 f0       	breq	.+4      	; 0x13b2 <vfprintf+0x1d2>
    13ae:	89 36       	cpi	r24, 0x69	; 105
    13b0:	41 f5       	brne	.+80     	; 0x1402 <vfprintf+0x222>
    13b2:	f8 01       	movw	r30, r16
    13b4:	37 fe       	sbrs	r3, 7
    13b6:	07 c0       	rjmp	.+14     	; 0x13c6 <vfprintf+0x1e6>
    13b8:	60 81       	ld	r22, Z
    13ba:	71 81       	ldd	r23, Z+1	; 0x01
    13bc:	82 81       	ldd	r24, Z+2	; 0x02
    13be:	93 81       	ldd	r25, Z+3	; 0x03
    13c0:	0c 5f       	subi	r16, 0xFC	; 252
    13c2:	1f 4f       	sbci	r17, 0xFF	; 255
    13c4:	08 c0       	rjmp	.+16     	; 0x13d6 <vfprintf+0x1f6>
    13c6:	60 81       	ld	r22, Z
    13c8:	71 81       	ldd	r23, Z+1	; 0x01
    13ca:	07 2e       	mov	r0, r23
    13cc:	00 0c       	add	r0, r0
    13ce:	88 0b       	sbc	r24, r24
    13d0:	99 0b       	sbc	r25, r25
    13d2:	0e 5f       	subi	r16, 0xFE	; 254
    13d4:	1f 4f       	sbci	r17, 0xFF	; 255
    13d6:	f3 2d       	mov	r31, r3
    13d8:	ff 76       	andi	r31, 0x6F	; 111
    13da:	3f 2e       	mov	r3, r31
    13dc:	97 ff       	sbrs	r25, 7
    13de:	09 c0       	rjmp	.+18     	; 0x13f2 <vfprintf+0x212>
    13e0:	90 95       	com	r25
    13e2:	80 95       	com	r24
    13e4:	70 95       	com	r23
    13e6:	61 95       	neg	r22
    13e8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ea:	8f 4f       	sbci	r24, 0xFF	; 255
    13ec:	9f 4f       	sbci	r25, 0xFF	; 255
    13ee:	f0 68       	ori	r31, 0x80	; 128
    13f0:	3f 2e       	mov	r3, r31
    13f2:	2a e0       	ldi	r18, 0x0A	; 10
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	a3 01       	movw	r20, r6
    13f8:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <__ultoa_invert>
    13fc:	88 2e       	mov	r8, r24
    13fe:	86 18       	sub	r8, r6
    1400:	45 c0       	rjmp	.+138    	; 0x148c <vfprintf+0x2ac>
    1402:	85 37       	cpi	r24, 0x75	; 117
    1404:	31 f4       	brne	.+12     	; 0x1412 <vfprintf+0x232>
    1406:	23 2d       	mov	r18, r3
    1408:	2f 7e       	andi	r18, 0xEF	; 239
    140a:	b2 2e       	mov	r11, r18
    140c:	2a e0       	ldi	r18, 0x0A	; 10
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	25 c0       	rjmp	.+74     	; 0x145c <vfprintf+0x27c>
    1412:	93 2d       	mov	r25, r3
    1414:	99 7f       	andi	r25, 0xF9	; 249
    1416:	b9 2e       	mov	r11, r25
    1418:	8f 36       	cpi	r24, 0x6F	; 111
    141a:	c1 f0       	breq	.+48     	; 0x144c <vfprintf+0x26c>
    141c:	18 f4       	brcc	.+6      	; 0x1424 <vfprintf+0x244>
    141e:	88 35       	cpi	r24, 0x58	; 88
    1420:	79 f0       	breq	.+30     	; 0x1440 <vfprintf+0x260>
    1422:	b5 c0       	rjmp	.+362    	; 0x158e <vfprintf+0x3ae>
    1424:	80 37       	cpi	r24, 0x70	; 112
    1426:	19 f0       	breq	.+6      	; 0x142e <vfprintf+0x24e>
    1428:	88 37       	cpi	r24, 0x78	; 120
    142a:	21 f0       	breq	.+8      	; 0x1434 <vfprintf+0x254>
    142c:	b0 c0       	rjmp	.+352    	; 0x158e <vfprintf+0x3ae>
    142e:	e9 2f       	mov	r30, r25
    1430:	e0 61       	ori	r30, 0x10	; 16
    1432:	be 2e       	mov	r11, r30
    1434:	b4 fe       	sbrs	r11, 4
    1436:	0d c0       	rjmp	.+26     	; 0x1452 <vfprintf+0x272>
    1438:	fb 2d       	mov	r31, r11
    143a:	f4 60       	ori	r31, 0x04	; 4
    143c:	bf 2e       	mov	r11, r31
    143e:	09 c0       	rjmp	.+18     	; 0x1452 <vfprintf+0x272>
    1440:	34 fe       	sbrs	r3, 4
    1442:	0a c0       	rjmp	.+20     	; 0x1458 <vfprintf+0x278>
    1444:	29 2f       	mov	r18, r25
    1446:	26 60       	ori	r18, 0x06	; 6
    1448:	b2 2e       	mov	r11, r18
    144a:	06 c0       	rjmp	.+12     	; 0x1458 <vfprintf+0x278>
    144c:	28 e0       	ldi	r18, 0x08	; 8
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	05 c0       	rjmp	.+10     	; 0x145c <vfprintf+0x27c>
    1452:	20 e1       	ldi	r18, 0x10	; 16
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	02 c0       	rjmp	.+4      	; 0x145c <vfprintf+0x27c>
    1458:	20 e1       	ldi	r18, 0x10	; 16
    145a:	32 e0       	ldi	r19, 0x02	; 2
    145c:	f8 01       	movw	r30, r16
    145e:	b7 fe       	sbrs	r11, 7
    1460:	07 c0       	rjmp	.+14     	; 0x1470 <vfprintf+0x290>
    1462:	60 81       	ld	r22, Z
    1464:	71 81       	ldd	r23, Z+1	; 0x01
    1466:	82 81       	ldd	r24, Z+2	; 0x02
    1468:	93 81       	ldd	r25, Z+3	; 0x03
    146a:	0c 5f       	subi	r16, 0xFC	; 252
    146c:	1f 4f       	sbci	r17, 0xFF	; 255
    146e:	06 c0       	rjmp	.+12     	; 0x147c <vfprintf+0x29c>
    1470:	60 81       	ld	r22, Z
    1472:	71 81       	ldd	r23, Z+1	; 0x01
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	0e 5f       	subi	r16, 0xFE	; 254
    147a:	1f 4f       	sbci	r17, 0xFF	; 255
    147c:	a3 01       	movw	r20, r6
    147e:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <__ultoa_invert>
    1482:	88 2e       	mov	r8, r24
    1484:	86 18       	sub	r8, r6
    1486:	fb 2d       	mov	r31, r11
    1488:	ff 77       	andi	r31, 0x7F	; 127
    148a:	3f 2e       	mov	r3, r31
    148c:	36 fe       	sbrs	r3, 6
    148e:	0d c0       	rjmp	.+26     	; 0x14aa <vfprintf+0x2ca>
    1490:	23 2d       	mov	r18, r3
    1492:	2e 7f       	andi	r18, 0xFE	; 254
    1494:	a2 2e       	mov	r10, r18
    1496:	89 14       	cp	r8, r9
    1498:	58 f4       	brcc	.+22     	; 0x14b0 <vfprintf+0x2d0>
    149a:	34 fe       	sbrs	r3, 4
    149c:	0b c0       	rjmp	.+22     	; 0x14b4 <vfprintf+0x2d4>
    149e:	32 fc       	sbrc	r3, 2
    14a0:	09 c0       	rjmp	.+18     	; 0x14b4 <vfprintf+0x2d4>
    14a2:	83 2d       	mov	r24, r3
    14a4:	8e 7e       	andi	r24, 0xEE	; 238
    14a6:	a8 2e       	mov	r10, r24
    14a8:	05 c0       	rjmp	.+10     	; 0x14b4 <vfprintf+0x2d4>
    14aa:	b8 2c       	mov	r11, r8
    14ac:	a3 2c       	mov	r10, r3
    14ae:	03 c0       	rjmp	.+6      	; 0x14b6 <vfprintf+0x2d6>
    14b0:	b8 2c       	mov	r11, r8
    14b2:	01 c0       	rjmp	.+2      	; 0x14b6 <vfprintf+0x2d6>
    14b4:	b9 2c       	mov	r11, r9
    14b6:	a4 fe       	sbrs	r10, 4
    14b8:	0f c0       	rjmp	.+30     	; 0x14d8 <vfprintf+0x2f8>
    14ba:	fe 01       	movw	r30, r28
    14bc:	e8 0d       	add	r30, r8
    14be:	f1 1d       	adc	r31, r1
    14c0:	80 81       	ld	r24, Z
    14c2:	80 33       	cpi	r24, 0x30	; 48
    14c4:	21 f4       	brne	.+8      	; 0x14ce <vfprintf+0x2ee>
    14c6:	9a 2d       	mov	r25, r10
    14c8:	99 7e       	andi	r25, 0xE9	; 233
    14ca:	a9 2e       	mov	r10, r25
    14cc:	09 c0       	rjmp	.+18     	; 0x14e0 <vfprintf+0x300>
    14ce:	a2 fe       	sbrs	r10, 2
    14d0:	06 c0       	rjmp	.+12     	; 0x14de <vfprintf+0x2fe>
    14d2:	b3 94       	inc	r11
    14d4:	b3 94       	inc	r11
    14d6:	04 c0       	rjmp	.+8      	; 0x14e0 <vfprintf+0x300>
    14d8:	8a 2d       	mov	r24, r10
    14da:	86 78       	andi	r24, 0x86	; 134
    14dc:	09 f0       	breq	.+2      	; 0x14e0 <vfprintf+0x300>
    14de:	b3 94       	inc	r11
    14e0:	a3 fc       	sbrc	r10, 3
    14e2:	11 c0       	rjmp	.+34     	; 0x1506 <vfprintf+0x326>
    14e4:	a0 fe       	sbrs	r10, 0
    14e6:	06 c0       	rjmp	.+12     	; 0x14f4 <vfprintf+0x314>
    14e8:	b2 14       	cp	r11, r2
    14ea:	88 f4       	brcc	.+34     	; 0x150e <vfprintf+0x32e>
    14ec:	28 0c       	add	r2, r8
    14ee:	92 2c       	mov	r9, r2
    14f0:	9b 18       	sub	r9, r11
    14f2:	0e c0       	rjmp	.+28     	; 0x1510 <vfprintf+0x330>
    14f4:	b2 14       	cp	r11, r2
    14f6:	60 f4       	brcc	.+24     	; 0x1510 <vfprintf+0x330>
    14f8:	b6 01       	movw	r22, r12
    14fa:	80 e2       	ldi	r24, 0x20	; 32
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	0e 94 85 08 	call	0x110a	; 0x110a <fputc>
    1502:	b3 94       	inc	r11
    1504:	f7 cf       	rjmp	.-18     	; 0x14f4 <vfprintf+0x314>
    1506:	b2 14       	cp	r11, r2
    1508:	18 f4       	brcc	.+6      	; 0x1510 <vfprintf+0x330>
    150a:	2b 18       	sub	r2, r11
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <vfprintf+0x332>
    150e:	98 2c       	mov	r9, r8
    1510:	21 2c       	mov	r2, r1
    1512:	a4 fe       	sbrs	r10, 4
    1514:	10 c0       	rjmp	.+32     	; 0x1536 <vfprintf+0x356>
    1516:	b6 01       	movw	r22, r12
    1518:	80 e3       	ldi	r24, 0x30	; 48
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	0e 94 85 08 	call	0x110a	; 0x110a <fputc>
    1520:	a2 fe       	sbrs	r10, 2
    1522:	17 c0       	rjmp	.+46     	; 0x1552 <vfprintf+0x372>
    1524:	a1 fc       	sbrc	r10, 1
    1526:	03 c0       	rjmp	.+6      	; 0x152e <vfprintf+0x34e>
    1528:	88 e7       	ldi	r24, 0x78	; 120
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <vfprintf+0x352>
    152e:	88 e5       	ldi	r24, 0x58	; 88
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	b6 01       	movw	r22, r12
    1534:	0c c0       	rjmp	.+24     	; 0x154e <vfprintf+0x36e>
    1536:	8a 2d       	mov	r24, r10
    1538:	86 78       	andi	r24, 0x86	; 134
    153a:	59 f0       	breq	.+22     	; 0x1552 <vfprintf+0x372>
    153c:	a1 fe       	sbrs	r10, 1
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <vfprintf+0x364>
    1540:	8b e2       	ldi	r24, 0x2B	; 43
    1542:	01 c0       	rjmp	.+2      	; 0x1546 <vfprintf+0x366>
    1544:	80 e2       	ldi	r24, 0x20	; 32
    1546:	a7 fc       	sbrc	r10, 7
    1548:	8d e2       	ldi	r24, 0x2D	; 45
    154a:	b6 01       	movw	r22, r12
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	0e 94 85 08 	call	0x110a	; 0x110a <fputc>
    1552:	89 14       	cp	r8, r9
    1554:	38 f4       	brcc	.+14     	; 0x1564 <vfprintf+0x384>
    1556:	b6 01       	movw	r22, r12
    1558:	80 e3       	ldi	r24, 0x30	; 48
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	0e 94 85 08 	call	0x110a	; 0x110a <fputc>
    1560:	9a 94       	dec	r9
    1562:	f7 cf       	rjmp	.-18     	; 0x1552 <vfprintf+0x372>
    1564:	8a 94       	dec	r8
    1566:	f3 01       	movw	r30, r6
    1568:	e8 0d       	add	r30, r8
    156a:	f1 1d       	adc	r31, r1
    156c:	80 81       	ld	r24, Z
    156e:	b6 01       	movw	r22, r12
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	0e 94 85 08 	call	0x110a	; 0x110a <fputc>
    1576:	81 10       	cpse	r8, r1
    1578:	f5 cf       	rjmp	.-22     	; 0x1564 <vfprintf+0x384>
    157a:	22 20       	and	r2, r2
    157c:	09 f4       	brne	.+2      	; 0x1580 <vfprintf+0x3a0>
    157e:	42 ce       	rjmp	.-892    	; 0x1204 <vfprintf+0x24>
    1580:	b6 01       	movw	r22, r12
    1582:	80 e2       	ldi	r24, 0x20	; 32
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	0e 94 85 08 	call	0x110a	; 0x110a <fputc>
    158a:	2a 94       	dec	r2
    158c:	f6 cf       	rjmp	.-20     	; 0x157a <vfprintf+0x39a>
    158e:	f6 01       	movw	r30, r12
    1590:	86 81       	ldd	r24, Z+6	; 0x06
    1592:	97 81       	ldd	r25, Z+7	; 0x07
    1594:	02 c0       	rjmp	.+4      	; 0x159a <vfprintf+0x3ba>
    1596:	8f ef       	ldi	r24, 0xFF	; 255
    1598:	9f ef       	ldi	r25, 0xFF	; 255
    159a:	2b 96       	adiw	r28, 0x0b	; 11
    159c:	e2 e1       	ldi	r30, 0x12	; 18
    159e:	0c 94 7c 0e 	jmp	0x1cf8	; 0x1cf8 <__epilogue_restores__>

000015a2 <putval>:
    15a2:	20 fd       	sbrc	r18, 0
    15a4:	09 c0       	rjmp	.+18     	; 0x15b8 <putval+0x16>
    15a6:	fc 01       	movw	r30, r24
    15a8:	23 fd       	sbrc	r18, 3
    15aa:	05 c0       	rjmp	.+10     	; 0x15b6 <putval+0x14>
    15ac:	22 ff       	sbrs	r18, 2
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <putval+0x12>
    15b0:	73 83       	std	Z+3, r23	; 0x03
    15b2:	62 83       	std	Z+2, r22	; 0x02
    15b4:	51 83       	std	Z+1, r21	; 0x01
    15b6:	40 83       	st	Z, r20
    15b8:	08 95       	ret

000015ba <mulacc>:
    15ba:	44 fd       	sbrc	r20, 4
    15bc:	17 c0       	rjmp	.+46     	; 0x15ec <mulacc+0x32>
    15be:	46 fd       	sbrc	r20, 6
    15c0:	17 c0       	rjmp	.+46     	; 0x15f0 <mulacc+0x36>
    15c2:	ab 01       	movw	r20, r22
    15c4:	bc 01       	movw	r22, r24
    15c6:	da 01       	movw	r26, r20
    15c8:	fb 01       	movw	r30, r22
    15ca:	aa 0f       	add	r26, r26
    15cc:	bb 1f       	adc	r27, r27
    15ce:	ee 1f       	adc	r30, r30
    15d0:	ff 1f       	adc	r31, r31
    15d2:	10 94       	com	r1
    15d4:	d1 f7       	brne	.-12     	; 0x15ca <mulacc+0x10>
    15d6:	4a 0f       	add	r20, r26
    15d8:	5b 1f       	adc	r21, r27
    15da:	6e 1f       	adc	r22, r30
    15dc:	7f 1f       	adc	r23, r31
    15de:	cb 01       	movw	r24, r22
    15e0:	ba 01       	movw	r22, r20
    15e2:	66 0f       	add	r22, r22
    15e4:	77 1f       	adc	r23, r23
    15e6:	88 1f       	adc	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	09 c0       	rjmp	.+18     	; 0x15fe <mulacc+0x44>
    15ec:	33 e0       	ldi	r19, 0x03	; 3
    15ee:	01 c0       	rjmp	.+2      	; 0x15f2 <mulacc+0x38>
    15f0:	34 e0       	ldi	r19, 0x04	; 4
    15f2:	66 0f       	add	r22, r22
    15f4:	77 1f       	adc	r23, r23
    15f6:	88 1f       	adc	r24, r24
    15f8:	99 1f       	adc	r25, r25
    15fa:	31 50       	subi	r19, 0x01	; 1
    15fc:	d1 f7       	brne	.-12     	; 0x15f2 <mulacc+0x38>
    15fe:	62 0f       	add	r22, r18
    1600:	71 1d       	adc	r23, r1
    1602:	81 1d       	adc	r24, r1
    1604:	91 1d       	adc	r25, r1
    1606:	08 95       	ret

00001608 <skip_spaces>:
    1608:	0f 93       	push	r16
    160a:	1f 93       	push	r17
    160c:	cf 93       	push	r28
    160e:	df 93       	push	r29
    1610:	8c 01       	movw	r16, r24
    1612:	c8 01       	movw	r24, r16
    1614:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <fgetc>
    1618:	ec 01       	movw	r28, r24
    161a:	97 fd       	sbrc	r25, 7
    161c:	08 c0       	rjmp	.+16     	; 0x162e <skip_spaces+0x26>
    161e:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <isspace>
    1622:	89 2b       	or	r24, r25
    1624:	b1 f7       	brne	.-20     	; 0x1612 <skip_spaces+0xa>
    1626:	b8 01       	movw	r22, r16
    1628:	ce 01       	movw	r24, r28
    162a:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <ungetc>
    162e:	ce 01       	movw	r24, r28
    1630:	df 91       	pop	r29
    1632:	cf 91       	pop	r28
    1634:	1f 91       	pop	r17
    1636:	0f 91       	pop	r16
    1638:	08 95       	ret

0000163a <conv_int>:
    163a:	8f 92       	push	r8
    163c:	9f 92       	push	r9
    163e:	af 92       	push	r10
    1640:	bf 92       	push	r11
    1642:	ef 92       	push	r14
    1644:	ff 92       	push	r15
    1646:	0f 93       	push	r16
    1648:	1f 93       	push	r17
    164a:	cf 93       	push	r28
    164c:	df 93       	push	r29
    164e:	8c 01       	movw	r16, r24
    1650:	d6 2f       	mov	r29, r22
    1652:	7a 01       	movw	r14, r20
    1654:	b2 2e       	mov	r11, r18
    1656:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <fgetc>
    165a:	9c 01       	movw	r18, r24
    165c:	33 27       	eor	r19, r19
    165e:	2b 32       	cpi	r18, 0x2B	; 43
    1660:	31 05       	cpc	r19, r1
    1662:	31 f0       	breq	.+12     	; 0x1670 <conv_int+0x36>
    1664:	2d 32       	cpi	r18, 0x2D	; 45
    1666:	31 05       	cpc	r19, r1
    1668:	61 f4       	brne	.+24     	; 0x1682 <conv_int+0x48>
    166a:	8b 2d       	mov	r24, r11
    166c:	80 68       	ori	r24, 0x80	; 128
    166e:	b8 2e       	mov	r11, r24
    1670:	d1 50       	subi	r29, 0x01	; 1
    1672:	11 f4       	brne	.+4      	; 0x1678 <conv_int+0x3e>
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	68 c0       	rjmp	.+208    	; 0x1748 <conv_int+0x10e>
    1678:	c8 01       	movw	r24, r16
    167a:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <fgetc>
    167e:	97 fd       	sbrc	r25, 7
    1680:	f9 cf       	rjmp	.-14     	; 0x1674 <conv_int+0x3a>
    1682:	cb 2d       	mov	r28, r11
    1684:	cd 7f       	andi	r28, 0xFD	; 253
    1686:	2b 2d       	mov	r18, r11
    1688:	20 73       	andi	r18, 0x30	; 48
    168a:	09 f5       	brne	.+66     	; 0x16ce <conv_int+0x94>
    168c:	80 33       	cpi	r24, 0x30	; 48
    168e:	f9 f4       	brne	.+62     	; 0x16ce <conv_int+0x94>
    1690:	aa 24       	eor	r10, r10
    1692:	aa 94       	dec	r10
    1694:	ad 0e       	add	r10, r29
    1696:	09 f4       	brne	.+2      	; 0x169a <conv_int+0x60>
    1698:	43 c0       	rjmp	.+134    	; 0x1720 <conv_int+0xe6>
    169a:	c8 01       	movw	r24, r16
    169c:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <fgetc>
    16a0:	97 fd       	sbrc	r25, 7
    16a2:	3e c0       	rjmp	.+124    	; 0x1720 <conv_int+0xe6>
    16a4:	9c 01       	movw	r18, r24
    16a6:	2f 7d       	andi	r18, 0xDF	; 223
    16a8:	33 27       	eor	r19, r19
    16aa:	28 35       	cpi	r18, 0x58	; 88
    16ac:	31 05       	cpc	r19, r1
    16ae:	49 f4       	brne	.+18     	; 0x16c2 <conv_int+0x88>
    16b0:	c2 64       	ori	r28, 0x42	; 66
    16b2:	d2 50       	subi	r29, 0x02	; 2
    16b4:	a9 f1       	breq	.+106    	; 0x1720 <conv_int+0xe6>
    16b6:	c8 01       	movw	r24, r16
    16b8:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <fgetc>
    16bc:	97 ff       	sbrs	r25, 7
    16be:	07 c0       	rjmp	.+14     	; 0x16ce <conv_int+0x94>
    16c0:	2f c0       	rjmp	.+94     	; 0x1720 <conv_int+0xe6>
    16c2:	b6 fe       	sbrs	r11, 6
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <conv_int+0x90>
    16c6:	c2 60       	ori	r28, 0x02	; 2
    16c8:	01 c0       	rjmp	.+2      	; 0x16cc <conv_int+0x92>
    16ca:	c2 61       	ori	r28, 0x12	; 18
    16cc:	da 2d       	mov	r29, r10
    16ce:	81 2c       	mov	r8, r1
    16d0:	91 2c       	mov	r9, r1
    16d2:	54 01       	movw	r10, r8
    16d4:	20 ed       	ldi	r18, 0xD0	; 208
    16d6:	28 0f       	add	r18, r24
    16d8:	28 30       	cpi	r18, 0x08	; 8
    16da:	80 f0       	brcs	.+32     	; 0x16fc <conv_int+0xc2>
    16dc:	c4 ff       	sbrs	r28, 4
    16de:	04 c0       	rjmp	.+8      	; 0x16e8 <conv_int+0xae>
    16e0:	b8 01       	movw	r22, r16
    16e2:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <ungetc>
    16e6:	19 c0       	rjmp	.+50     	; 0x171a <conv_int+0xe0>
    16e8:	2a 30       	cpi	r18, 0x0A	; 10
    16ea:	40 f0       	brcs	.+16     	; 0x16fc <conv_int+0xc2>
    16ec:	c6 ff       	sbrs	r28, 6
    16ee:	f8 cf       	rjmp	.-16     	; 0x16e0 <conv_int+0xa6>
    16f0:	2f 7d       	andi	r18, 0xDF	; 223
    16f2:	3f ee       	ldi	r19, 0xEF	; 239
    16f4:	32 0f       	add	r19, r18
    16f6:	36 30       	cpi	r19, 0x06	; 6
    16f8:	98 f7       	brcc	.-26     	; 0x16e0 <conv_int+0xa6>
    16fa:	27 50       	subi	r18, 0x07	; 7
    16fc:	4c 2f       	mov	r20, r28
    16fe:	c5 01       	movw	r24, r10
    1700:	b4 01       	movw	r22, r8
    1702:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <mulacc>
    1706:	4b 01       	movw	r8, r22
    1708:	5c 01       	movw	r10, r24
    170a:	c2 60       	ori	r28, 0x02	; 2
    170c:	d1 50       	subi	r29, 0x01	; 1
    170e:	59 f0       	breq	.+22     	; 0x1726 <conv_int+0xec>
    1710:	c8 01       	movw	r24, r16
    1712:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <fgetc>
    1716:	97 ff       	sbrs	r25, 7
    1718:	dd cf       	rjmp	.-70     	; 0x16d4 <conv_int+0x9a>
    171a:	c1 fd       	sbrc	r28, 1
    171c:	04 c0       	rjmp	.+8      	; 0x1726 <conv_int+0xec>
    171e:	aa cf       	rjmp	.-172    	; 0x1674 <conv_int+0x3a>
    1720:	81 2c       	mov	r8, r1
    1722:	91 2c       	mov	r9, r1
    1724:	54 01       	movw	r10, r8
    1726:	c7 ff       	sbrs	r28, 7
    1728:	08 c0       	rjmp	.+16     	; 0x173a <conv_int+0x100>
    172a:	b0 94       	com	r11
    172c:	a0 94       	com	r10
    172e:	90 94       	com	r9
    1730:	80 94       	com	r8
    1732:	81 1c       	adc	r8, r1
    1734:	91 1c       	adc	r9, r1
    1736:	a1 1c       	adc	r10, r1
    1738:	b1 1c       	adc	r11, r1
    173a:	2c 2f       	mov	r18, r28
    173c:	b5 01       	movw	r22, r10
    173e:	a4 01       	movw	r20, r8
    1740:	c7 01       	movw	r24, r14
    1742:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <putval>
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	df 91       	pop	r29
    174a:	cf 91       	pop	r28
    174c:	1f 91       	pop	r17
    174e:	0f 91       	pop	r16
    1750:	ff 90       	pop	r15
    1752:	ef 90       	pop	r14
    1754:	bf 90       	pop	r11
    1756:	af 90       	pop	r10
    1758:	9f 90       	pop	r9
    175a:	8f 90       	pop	r8
    175c:	08 95       	ret

0000175e <conv_brk>:
    175e:	a0 e2       	ldi	r26, 0x20	; 32
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	e5 eb       	ldi	r30, 0xB5	; 181
    1764:	fb e0       	ldi	r31, 0x0B	; 11
    1766:	0c 94 63 0e 	jmp	0x1cc6	; 0x1cc6 <__prologue_saves__+0x6>
    176a:	5c 01       	movw	r10, r24
    176c:	96 2e       	mov	r9, r22
    176e:	7a 01       	movw	r14, r20
    1770:	f9 01       	movw	r30, r18
    1772:	8e 01       	movw	r16, r28
    1774:	0f 5f       	subi	r16, 0xFF	; 255
    1776:	1f 4f       	sbci	r17, 0xFF	; 255
    1778:	68 01       	movw	r12, r16
    177a:	80 e2       	ldi	r24, 0x20	; 32
    177c:	d8 01       	movw	r26, r16
    177e:	1d 92       	st	X+, r1
    1780:	8a 95       	dec	r24
    1782:	e9 f7       	brne	.-6      	; 0x177e <conv_brk+0x20>
    1784:	d5 01       	movw	r26, r10
    1786:	13 96       	adiw	r26, 0x03	; 3
    1788:	8c 90       	ld	r8, X
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	61 2c       	mov	r6, r1
    1790:	71 2c       	mov	r7, r1
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	61 e0       	ldi	r22, 0x01	; 1
    1796:	70 e0       	ldi	r23, 0x00	; 0
    1798:	83 fc       	sbrc	r8, 3
    179a:	25 91       	lpm	r18, Z+
    179c:	83 fe       	sbrs	r8, 3
    179e:	21 91       	ld	r18, Z+
    17a0:	8f 01       	movw	r16, r30
    17a2:	52 2e       	mov	r5, r18
    17a4:	21 11       	cpse	r18, r1
    17a6:	03 c0       	rjmp	.+6      	; 0x17ae <conv_brk+0x50>
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	92 c0       	rjmp	.+292    	; 0x18d2 <conv_brk+0x174>
    17ae:	2e 35       	cpi	r18, 0x5E	; 94
    17b0:	11 f4       	brne	.+4      	; 0x17b6 <conv_brk+0x58>
    17b2:	00 97       	sbiw	r24, 0x00	; 0
    17b4:	51 f1       	breq	.+84     	; 0x180a <conv_brk+0xac>
    17b6:	43 2f       	mov	r20, r19
    17b8:	50 e0       	ldi	r21, 0x00	; 0
    17ba:	48 17       	cp	r20, r24
    17bc:	59 07       	cpc	r21, r25
    17be:	3c f4       	brge	.+14     	; 0x17ce <conv_brk+0x70>
    17c0:	2d 35       	cpi	r18, 0x5D	; 93
    17c2:	59 f1       	breq	.+86     	; 0x181a <conv_brk+0xbc>
    17c4:	2d 32       	cpi	r18, 0x2D	; 45
    17c6:	19 f4       	brne	.+6      	; 0x17ce <conv_brk+0x70>
    17c8:	77 20       	and	r7, r7
    17ca:	09 f1       	breq	.+66     	; 0x180e <conv_brk+0xb0>
    17cc:	03 c0       	rjmp	.+6      	; 0x17d4 <conv_brk+0x76>
    17ce:	77 20       	and	r7, r7
    17d0:	09 f4       	brne	.+2      	; 0x17d4 <conv_brk+0x76>
    17d2:	6a c0       	rjmp	.+212    	; 0x18a8 <conv_brk+0x14a>
    17d4:	45 2d       	mov	r20, r5
    17d6:	46 95       	lsr	r20
    17d8:	46 95       	lsr	r20
    17da:	46 95       	lsr	r20
    17dc:	d6 01       	movw	r26, r12
    17de:	a4 0f       	add	r26, r20
    17e0:	b1 1d       	adc	r27, r1
    17e2:	45 2d       	mov	r20, r5
    17e4:	47 70       	andi	r20, 0x07	; 7
    17e6:	8b 01       	movw	r16, r22
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <conv_brk+0x90>
    17ea:	00 0f       	add	r16, r16
    17ec:	11 1f       	adc	r17, r17
    17ee:	4a 95       	dec	r20
    17f0:	e2 f7       	brpl	.-8      	; 0x17ea <conv_brk+0x8c>
    17f2:	a8 01       	movw	r20, r16
    17f4:	5c 91       	ld	r21, X
    17f6:	45 2b       	or	r20, r21
    17f8:	4c 93       	st	X, r20
    17fa:	65 14       	cp	r6, r5
    17fc:	59 f0       	breq	.+22     	; 0x1814 <conv_brk+0xb6>
    17fe:	56 14       	cp	r5, r6
    1800:	10 f4       	brcc	.+4      	; 0x1806 <conv_brk+0xa8>
    1802:	53 94       	inc	r5
    1804:	e7 cf       	rjmp	.-50     	; 0x17d4 <conv_brk+0x76>
    1806:	5a 94       	dec	r5
    1808:	e5 cf       	rjmp	.-54     	; 0x17d4 <conv_brk+0x76>
    180a:	31 e0       	ldi	r19, 0x01	; 1
    180c:	04 c0       	rjmp	.+8      	; 0x1816 <conv_brk+0xb8>
    180e:	77 24       	eor	r7, r7
    1810:	73 94       	inc	r7
    1812:	01 c0       	rjmp	.+2      	; 0x1816 <conv_brk+0xb8>
    1814:	71 2c       	mov	r7, r1
    1816:	01 96       	adiw	r24, 0x01	; 1
    1818:	bf cf       	rjmp	.-130    	; 0x1798 <conv_brk+0x3a>
    181a:	77 20       	and	r7, r7
    181c:	19 f0       	breq	.+6      	; 0x1824 <conv_brk+0xc6>
    181e:	8e 81       	ldd	r24, Y+6	; 0x06
    1820:	80 62       	ori	r24, 0x20	; 32
    1822:	8e 83       	std	Y+6, r24	; 0x06
    1824:	31 11       	cpse	r19, r1
    1826:	03 c0       	rjmp	.+6      	; 0x182e <conv_brk+0xd0>
    1828:	88 24       	eor	r8, r8
    182a:	83 94       	inc	r8
    182c:	17 c0       	rjmp	.+46     	; 0x185c <conv_brk+0xfe>
    182e:	f6 01       	movw	r30, r12
    1830:	9e 01       	movw	r18, r28
    1832:	2f 5d       	subi	r18, 0xDF	; 223
    1834:	3f 4f       	sbci	r19, 0xFF	; 255
    1836:	80 81       	ld	r24, Z
    1838:	80 95       	com	r24
    183a:	81 93       	st	Z+, r24
    183c:	2e 17       	cp	r18, r30
    183e:	3f 07       	cpc	r19, r31
    1840:	d1 f7       	brne	.-12     	; 0x1836 <conv_brk+0xd8>
    1842:	f2 cf       	rjmp	.-28     	; 0x1828 <conv_brk+0xca>
    1844:	e1 14       	cp	r14, r1
    1846:	f1 04       	cpc	r15, r1
    1848:	29 f0       	breq	.+10     	; 0x1854 <conv_brk+0xf6>
    184a:	d7 01       	movw	r26, r14
    184c:	8c 93       	st	X, r24
    184e:	f7 01       	movw	r30, r14
    1850:	31 96       	adiw	r30, 0x01	; 1
    1852:	7f 01       	movw	r14, r30
    1854:	9a 94       	dec	r9
    1856:	81 2c       	mov	r8, r1
    1858:	99 20       	and	r9, r9
    185a:	f9 f0       	breq	.+62     	; 0x189a <conv_brk+0x13c>
    185c:	c5 01       	movw	r24, r10
    185e:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <fgetc>
    1862:	97 fd       	sbrc	r25, 7
    1864:	18 c0       	rjmp	.+48     	; 0x1896 <conv_brk+0x138>
    1866:	fc 01       	movw	r30, r24
    1868:	ff 27       	eor	r31, r31
    186a:	23 e0       	ldi	r18, 0x03	; 3
    186c:	f5 95       	asr	r31
    186e:	e7 95       	ror	r30
    1870:	2a 95       	dec	r18
    1872:	e1 f7       	brne	.-8      	; 0x186c <conv_brk+0x10e>
    1874:	ec 0d       	add	r30, r12
    1876:	fd 1d       	adc	r31, r13
    1878:	20 81       	ld	r18, Z
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	ac 01       	movw	r20, r24
    187e:	47 70       	andi	r20, 0x07	; 7
    1880:	55 27       	eor	r21, r21
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <conv_brk+0x12a>
    1884:	35 95       	asr	r19
    1886:	27 95       	ror	r18
    1888:	4a 95       	dec	r20
    188a:	e2 f7       	brpl	.-8      	; 0x1884 <conv_brk+0x126>
    188c:	20 fd       	sbrc	r18, 0
    188e:	da cf       	rjmp	.-76     	; 0x1844 <conv_brk+0xe6>
    1890:	b5 01       	movw	r22, r10
    1892:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <ungetc>
    1896:	81 10       	cpse	r8, r1
    1898:	87 cf       	rjmp	.-242    	; 0x17a8 <conv_brk+0x4a>
    189a:	e1 14       	cp	r14, r1
    189c:	f1 04       	cpc	r15, r1
    189e:	11 f0       	breq	.+4      	; 0x18a4 <conv_brk+0x146>
    18a0:	d7 01       	movw	r26, r14
    18a2:	1c 92       	st	X, r1
    18a4:	c8 01       	movw	r24, r16
    18a6:	15 c0       	rjmp	.+42     	; 0x18d2 <conv_brk+0x174>
    18a8:	42 2f       	mov	r20, r18
    18aa:	46 95       	lsr	r20
    18ac:	46 95       	lsr	r20
    18ae:	46 95       	lsr	r20
    18b0:	d6 01       	movw	r26, r12
    18b2:	a4 0f       	add	r26, r20
    18b4:	b1 1d       	adc	r27, r1
    18b6:	42 2f       	mov	r20, r18
    18b8:	47 70       	andi	r20, 0x07	; 7
    18ba:	8b 01       	movw	r16, r22
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <conv_brk+0x164>
    18be:	00 0f       	add	r16, r16
    18c0:	11 1f       	adc	r17, r17
    18c2:	4a 95       	dec	r20
    18c4:	e2 f7       	brpl	.-8      	; 0x18be <conv_brk+0x160>
    18c6:	a8 01       	movw	r20, r16
    18c8:	5c 91       	ld	r21, X
    18ca:	45 2b       	or	r20, r21
    18cc:	4c 93       	st	X, r20
    18ce:	62 2e       	mov	r6, r18
    18d0:	a2 cf       	rjmp	.-188    	; 0x1816 <conv_brk+0xb8>
    18d2:	a0 96       	adiw	r28, 0x20	; 32
    18d4:	ef e0       	ldi	r30, 0x0F	; 15
    18d6:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <__epilogue_restores__+0x6>

000018da <vfscanf>:
    18da:	a0 e0       	ldi	r26, 0x00	; 0
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	e3 e7       	ldi	r30, 0x73	; 115
    18e0:	fc e0       	ldi	r31, 0x0C	; 12
    18e2:	0c 94 63 0e 	jmp	0x1cc6	; 0x1cc6 <__prologue_saves__+0x6>
    18e6:	6c 01       	movw	r12, r24
    18e8:	eb 01       	movw	r28, r22
    18ea:	5a 01       	movw	r10, r20
    18ec:	fc 01       	movw	r30, r24
    18ee:	17 82       	std	Z+7, r1	; 0x07
    18f0:	16 82       	std	Z+6, r1	; 0x06
    18f2:	51 2c       	mov	r5, r1
    18f4:	f6 01       	movw	r30, r12
    18f6:	e3 80       	ldd	r14, Z+3	; 0x03
    18f8:	fe 01       	movw	r30, r28
    18fa:	e3 fc       	sbrc	r14, 3
    18fc:	85 91       	lpm	r24, Z+
    18fe:	e3 fe       	sbrs	r14, 3
    1900:	81 91       	ld	r24, Z+
    1902:	18 2f       	mov	r17, r24
    1904:	ef 01       	movw	r28, r30
    1906:	88 23       	and	r24, r24
    1908:	09 f4       	brne	.+2      	; 0x190c <vfscanf+0x32>
    190a:	ee c0       	rjmp	.+476    	; 0x1ae8 <vfscanf+0x20e>
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <isspace>
    1912:	89 2b       	or	r24, r25
    1914:	21 f0       	breq	.+8      	; 0x191e <vfscanf+0x44>
    1916:	c6 01       	movw	r24, r12
    1918:	0e 94 04 0b 	call	0x1608	; 0x1608 <skip_spaces>
    191c:	eb cf       	rjmp	.-42     	; 0x18f4 <vfscanf+0x1a>
    191e:	15 32       	cpi	r17, 0x25	; 37
    1920:	41 f4       	brne	.+16     	; 0x1932 <vfscanf+0x58>
    1922:	fe 01       	movw	r30, r28
    1924:	e3 fc       	sbrc	r14, 3
    1926:	15 91       	lpm	r17, Z+
    1928:	e3 fe       	sbrs	r14, 3
    192a:	11 91       	ld	r17, Z+
    192c:	ef 01       	movw	r28, r30
    192e:	15 32       	cpi	r17, 0x25	; 37
    1930:	81 f4       	brne	.+32     	; 0x1952 <vfscanf+0x78>
    1932:	c6 01       	movw	r24, r12
    1934:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <fgetc>
    1938:	97 fd       	sbrc	r25, 7
    193a:	d4 c0       	rjmp	.+424    	; 0x1ae4 <vfscanf+0x20a>
    193c:	41 2f       	mov	r20, r17
    193e:	50 e0       	ldi	r21, 0x00	; 0
    1940:	9c 01       	movw	r18, r24
    1942:	33 27       	eor	r19, r19
    1944:	24 17       	cp	r18, r20
    1946:	35 07       	cpc	r19, r21
    1948:	a9 f2       	breq	.-86     	; 0x18f4 <vfscanf+0x1a>
    194a:	b6 01       	movw	r22, r12
    194c:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <ungetc>
    1950:	cb c0       	rjmp	.+406    	; 0x1ae8 <vfscanf+0x20e>
    1952:	1a 32       	cpi	r17, 0x2A	; 42
    1954:	39 f4       	brne	.+14     	; 0x1964 <vfscanf+0x8a>
    1956:	e3 fc       	sbrc	r14, 3
    1958:	15 91       	lpm	r17, Z+
    195a:	e3 fe       	sbrs	r14, 3
    195c:	11 91       	ld	r17, Z+
    195e:	ef 01       	movw	r28, r30
    1960:	01 e0       	ldi	r16, 0x01	; 1
    1962:	01 c0       	rjmp	.+2      	; 0x1966 <vfscanf+0x8c>
    1964:	00 e0       	ldi	r16, 0x00	; 0
    1966:	f1 2c       	mov	r15, r1
    1968:	20 ed       	ldi	r18, 0xD0	; 208
    196a:	21 0f       	add	r18, r17
    196c:	2a 30       	cpi	r18, 0x0A	; 10
    196e:	80 f4       	brcc	.+32     	; 0x1990 <vfscanf+0xb6>
    1970:	02 60       	ori	r16, 0x02	; 2
    1972:	6f 2d       	mov	r22, r15
    1974:	70 e0       	ldi	r23, 0x00	; 0
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	40 e2       	ldi	r20, 0x20	; 32
    197c:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <mulacc>
    1980:	f6 2e       	mov	r15, r22
    1982:	fe 01       	movw	r30, r28
    1984:	e3 fc       	sbrc	r14, 3
    1986:	15 91       	lpm	r17, Z+
    1988:	e3 fe       	sbrs	r14, 3
    198a:	11 91       	ld	r17, Z+
    198c:	ef 01       	movw	r28, r30
    198e:	ec cf       	rjmp	.-40     	; 0x1968 <vfscanf+0x8e>
    1990:	01 ff       	sbrs	r16, 1
    1992:	03 c0       	rjmp	.+6      	; 0x199a <vfscanf+0xc0>
    1994:	f1 10       	cpse	r15, r1
    1996:	03 c0       	rjmp	.+6      	; 0x199e <vfscanf+0xc4>
    1998:	a7 c0       	rjmp	.+334    	; 0x1ae8 <vfscanf+0x20e>
    199a:	ff 24       	eor	r15, r15
    199c:	fa 94       	dec	r15
    199e:	18 36       	cpi	r17, 0x68	; 104
    19a0:	19 f0       	breq	.+6      	; 0x19a8 <vfscanf+0xce>
    19a2:	1c 36       	cpi	r17, 0x6C	; 108
    19a4:	51 f0       	breq	.+20     	; 0x19ba <vfscanf+0xe0>
    19a6:	10 c0       	rjmp	.+32     	; 0x19c8 <vfscanf+0xee>
    19a8:	fe 01       	movw	r30, r28
    19aa:	e3 fc       	sbrc	r14, 3
    19ac:	15 91       	lpm	r17, Z+
    19ae:	e3 fe       	sbrs	r14, 3
    19b0:	11 91       	ld	r17, Z+
    19b2:	ef 01       	movw	r28, r30
    19b4:	18 36       	cpi	r17, 0x68	; 104
    19b6:	41 f4       	brne	.+16     	; 0x19c8 <vfscanf+0xee>
    19b8:	08 60       	ori	r16, 0x08	; 8
    19ba:	04 60       	ori	r16, 0x04	; 4
    19bc:	fe 01       	movw	r30, r28
    19be:	e3 fc       	sbrc	r14, 3
    19c0:	15 91       	lpm	r17, Z+
    19c2:	e3 fe       	sbrs	r14, 3
    19c4:	11 91       	ld	r17, Z+
    19c6:	ef 01       	movw	r28, r30
    19c8:	11 23       	and	r17, r17
    19ca:	09 f4       	brne	.+2      	; 0x19ce <vfscanf+0xf4>
    19cc:	8d c0       	rjmp	.+282    	; 0x1ae8 <vfscanf+0x20e>
    19ce:	61 2f       	mov	r22, r17
    19d0:	70 e0       	ldi	r23, 0x00	; 0
    19d2:	82 e2       	ldi	r24, 0x22	; 34
    19d4:	91 e0       	ldi	r25, 0x01	; 1
    19d6:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <strchr_P>
    19da:	89 2b       	or	r24, r25
    19dc:	09 f4       	brne	.+2      	; 0x19e0 <vfscanf+0x106>
    19de:	84 c0       	rjmp	.+264    	; 0x1ae8 <vfscanf+0x20e>
    19e0:	00 fd       	sbrc	r16, 0
    19e2:	07 c0       	rjmp	.+14     	; 0x19f2 <vfscanf+0x118>
    19e4:	f5 01       	movw	r30, r10
    19e6:	80 80       	ld	r8, Z
    19e8:	91 80       	ldd	r9, Z+1	; 0x01
    19ea:	c5 01       	movw	r24, r10
    19ec:	02 96       	adiw	r24, 0x02	; 2
    19ee:	5c 01       	movw	r10, r24
    19f0:	02 c0       	rjmp	.+4      	; 0x19f6 <vfscanf+0x11c>
    19f2:	81 2c       	mov	r8, r1
    19f4:	91 2c       	mov	r9, r1
    19f6:	1e 36       	cpi	r17, 0x6E	; 110
    19f8:	51 f4       	brne	.+20     	; 0x1a0e <vfscanf+0x134>
    19fa:	f6 01       	movw	r30, r12
    19fc:	46 81       	ldd	r20, Z+6	; 0x06
    19fe:	57 81       	ldd	r21, Z+7	; 0x07
    1a00:	60 e0       	ldi	r22, 0x00	; 0
    1a02:	70 e0       	ldi	r23, 0x00	; 0
    1a04:	20 2f       	mov	r18, r16
    1a06:	c4 01       	movw	r24, r8
    1a08:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <putval>
    1a0c:	73 cf       	rjmp	.-282    	; 0x18f4 <vfscanf+0x1a>
    1a0e:	13 36       	cpi	r17, 0x63	; 99
    1a10:	a9 f4       	brne	.+42     	; 0x1a3c <vfscanf+0x162>
    1a12:	01 fd       	sbrc	r16, 1
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <vfscanf+0x140>
    1a16:	ff 24       	eor	r15, r15
    1a18:	f3 94       	inc	r15
    1a1a:	c6 01       	movw	r24, r12
    1a1c:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <fgetc>
    1a20:	97 fd       	sbrc	r25, 7
    1a22:	60 c0       	rjmp	.+192    	; 0x1ae4 <vfscanf+0x20a>
    1a24:	81 14       	cp	r8, r1
    1a26:	91 04       	cpc	r9, r1
    1a28:	29 f0       	breq	.+10     	; 0x1a34 <vfscanf+0x15a>
    1a2a:	f4 01       	movw	r30, r8
    1a2c:	80 83       	st	Z, r24
    1a2e:	c4 01       	movw	r24, r8
    1a30:	01 96       	adiw	r24, 0x01	; 1
    1a32:	4c 01       	movw	r8, r24
    1a34:	fa 94       	dec	r15
    1a36:	f1 10       	cpse	r15, r1
    1a38:	f0 cf       	rjmp	.-32     	; 0x1a1a <vfscanf+0x140>
    1a3a:	50 c0       	rjmp	.+160    	; 0x1adc <vfscanf+0x202>
    1a3c:	1b 35       	cpi	r17, 0x5B	; 91
    1a3e:	59 f4       	brne	.+22     	; 0x1a56 <vfscanf+0x17c>
    1a40:	9e 01       	movw	r18, r28
    1a42:	a4 01       	movw	r20, r8
    1a44:	6f 2d       	mov	r22, r15
    1a46:	c6 01       	movw	r24, r12
    1a48:	0e 94 af 0b 	call	0x175e	; 0x175e <conv_brk>
    1a4c:	ec 01       	movw	r28, r24
    1a4e:	89 2b       	or	r24, r25
    1a50:	09 f0       	breq	.+2      	; 0x1a54 <vfscanf+0x17a>
    1a52:	44 c0       	rjmp	.+136    	; 0x1adc <vfscanf+0x202>
    1a54:	3e c0       	rjmp	.+124    	; 0x1ad2 <vfscanf+0x1f8>
    1a56:	c6 01       	movw	r24, r12
    1a58:	0e 94 04 0b 	call	0x1608	; 0x1608 <skip_spaces>
    1a5c:	97 fd       	sbrc	r25, 7
    1a5e:	42 c0       	rjmp	.+132    	; 0x1ae4 <vfscanf+0x20a>
    1a60:	1f 36       	cpi	r17, 0x6F	; 111
    1a62:	61 f1       	breq	.+88     	; 0x1abc <vfscanf+0x1e2>
    1a64:	28 f4       	brcc	.+10     	; 0x1a70 <vfscanf+0x196>
    1a66:	14 36       	cpi	r17, 0x64	; 100
    1a68:	39 f1       	breq	.+78     	; 0x1ab8 <vfscanf+0x1de>
    1a6a:	19 36       	cpi	r17, 0x69	; 105
    1a6c:	51 f1       	breq	.+84     	; 0x1ac2 <vfscanf+0x1e8>
    1a6e:	28 c0       	rjmp	.+80     	; 0x1ac0 <vfscanf+0x1e6>
    1a70:	13 37       	cpi	r17, 0x73	; 115
    1a72:	71 f0       	breq	.+28     	; 0x1a90 <vfscanf+0x1b6>
    1a74:	15 37       	cpi	r17, 0x75	; 117
    1a76:	01 f1       	breq	.+64     	; 0x1ab8 <vfscanf+0x1de>
    1a78:	23 c0       	rjmp	.+70     	; 0x1ac0 <vfscanf+0x1e6>
    1a7a:	81 14       	cp	r8, r1
    1a7c:	91 04       	cpc	r9, r1
    1a7e:	29 f0       	breq	.+10     	; 0x1a8a <vfscanf+0x1b0>
    1a80:	f4 01       	movw	r30, r8
    1a82:	60 82       	st	Z, r6
    1a84:	c4 01       	movw	r24, r8
    1a86:	01 96       	adiw	r24, 0x01	; 1
    1a88:	4c 01       	movw	r8, r24
    1a8a:	fa 94       	dec	r15
    1a8c:	ff 20       	and	r15, r15
    1a8e:	71 f0       	breq	.+28     	; 0x1aac <vfscanf+0x1d2>
    1a90:	c6 01       	movw	r24, r12
    1a92:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <fgetc>
    1a96:	3c 01       	movw	r6, r24
    1a98:	97 fd       	sbrc	r25, 7
    1a9a:	08 c0       	rjmp	.+16     	; 0x1aac <vfscanf+0x1d2>
    1a9c:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <isspace>
    1aa0:	89 2b       	or	r24, r25
    1aa2:	59 f3       	breq	.-42     	; 0x1a7a <vfscanf+0x1a0>
    1aa4:	b6 01       	movw	r22, r12
    1aa6:	c3 01       	movw	r24, r6
    1aa8:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <ungetc>
    1aac:	81 14       	cp	r8, r1
    1aae:	91 04       	cpc	r9, r1
    1ab0:	a9 f0       	breq	.+42     	; 0x1adc <vfscanf+0x202>
    1ab2:	f4 01       	movw	r30, r8
    1ab4:	10 82       	st	Z, r1
    1ab6:	12 c0       	rjmp	.+36     	; 0x1adc <vfscanf+0x202>
    1ab8:	00 62       	ori	r16, 0x20	; 32
    1aba:	03 c0       	rjmp	.+6      	; 0x1ac2 <vfscanf+0x1e8>
    1abc:	00 61       	ori	r16, 0x10	; 16
    1abe:	01 c0       	rjmp	.+2      	; 0x1ac2 <vfscanf+0x1e8>
    1ac0:	00 64       	ori	r16, 0x40	; 64
    1ac2:	20 2f       	mov	r18, r16
    1ac4:	a4 01       	movw	r20, r8
    1ac6:	6f 2d       	mov	r22, r15
    1ac8:	c6 01       	movw	r24, r12
    1aca:	0e 94 1d 0b 	call	0x163a	; 0x163a <conv_int>
    1ace:	81 11       	cpse	r24, r1
    1ad0:	05 c0       	rjmp	.+10     	; 0x1adc <vfscanf+0x202>
    1ad2:	f6 01       	movw	r30, r12
    1ad4:	83 81       	ldd	r24, Z+3	; 0x03
    1ad6:	80 73       	andi	r24, 0x30	; 48
    1ad8:	29 f4       	brne	.+10     	; 0x1ae4 <vfscanf+0x20a>
    1ada:	06 c0       	rjmp	.+12     	; 0x1ae8 <vfscanf+0x20e>
    1adc:	00 fd       	sbrc	r16, 0
    1ade:	0a cf       	rjmp	.-492    	; 0x18f4 <vfscanf+0x1a>
    1ae0:	53 94       	inc	r5
    1ae2:	08 cf       	rjmp	.-496    	; 0x18f4 <vfscanf+0x1a>
    1ae4:	55 20       	and	r5, r5
    1ae6:	19 f0       	breq	.+6      	; 0x1aee <vfscanf+0x214>
    1ae8:	85 2d       	mov	r24, r5
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <vfscanf+0x218>
    1aee:	8f ef       	ldi	r24, 0xFF	; 255
    1af0:	9f ef       	ldi	r25, 0xFF	; 255
    1af2:	cd b7       	in	r28, 0x3d	; 61
    1af4:	de b7       	in	r29, 0x3e	; 62
    1af6:	ef e0       	ldi	r30, 0x0F	; 15
    1af8:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <__epilogue_restores__+0x6>

00001afc <isspace>:
    1afc:	91 11       	cpse	r25, r1
    1afe:	0c 94 5d 0e 	jmp	0x1cba	; 0x1cba <__ctype_isfalse>
    1b02:	80 32       	cpi	r24, 0x20	; 32
    1b04:	19 f0       	breq	.+6      	; 0x1b0c <isspace+0x10>
    1b06:	89 50       	subi	r24, 0x09	; 9
    1b08:	85 50       	subi	r24, 0x05	; 5
    1b0a:	c8 f7       	brcc	.-14     	; 0x1afe <isspace+0x2>
    1b0c:	08 95       	ret

00001b0e <strchr_P>:
    1b0e:	fc 01       	movw	r30, r24
    1b10:	05 90       	lpm	r0, Z+
    1b12:	06 16       	cp	r0, r22
    1b14:	21 f0       	breq	.+8      	; 0x1b1e <strchr_P+0x10>
    1b16:	00 20       	and	r0, r0
    1b18:	d9 f7       	brne	.-10     	; 0x1b10 <strchr_P+0x2>
    1b1a:	c0 01       	movw	r24, r0
    1b1c:	08 95       	ret
    1b1e:	31 97       	sbiw	r30, 0x01	; 1
    1b20:	cf 01       	movw	r24, r30
    1b22:	08 95       	ret

00001b24 <strnlen_P>:
    1b24:	fc 01       	movw	r30, r24
    1b26:	05 90       	lpm	r0, Z+
    1b28:	61 50       	subi	r22, 0x01	; 1
    1b2a:	70 40       	sbci	r23, 0x00	; 0
    1b2c:	01 10       	cpse	r0, r1
    1b2e:	d8 f7       	brcc	.-10     	; 0x1b26 <strnlen_P+0x2>
    1b30:	80 95       	com	r24
    1b32:	90 95       	com	r25
    1b34:	8e 0f       	add	r24, r30
    1b36:	9f 1f       	adc	r25, r31
    1b38:	08 95       	ret

00001b3a <strnlen>:
    1b3a:	fc 01       	movw	r30, r24
    1b3c:	61 50       	subi	r22, 0x01	; 1
    1b3e:	70 40       	sbci	r23, 0x00	; 0
    1b40:	01 90       	ld	r0, Z+
    1b42:	01 10       	cpse	r0, r1
    1b44:	d8 f7       	brcc	.-10     	; 0x1b3c <strnlen+0x2>
    1b46:	80 95       	com	r24
    1b48:	90 95       	com	r25
    1b4a:	8e 0f       	add	r24, r30
    1b4c:	9f 1f       	adc	r25, r31
    1b4e:	08 95       	ret

00001b50 <fgetc>:
    1b50:	cf 93       	push	r28
    1b52:	df 93       	push	r29
    1b54:	ec 01       	movw	r28, r24
    1b56:	2b 81       	ldd	r18, Y+3	; 0x03
    1b58:	20 ff       	sbrs	r18, 0
    1b5a:	33 c0       	rjmp	.+102    	; 0x1bc2 <fgetc+0x72>
    1b5c:	26 ff       	sbrs	r18, 6
    1b5e:	0a c0       	rjmp	.+20     	; 0x1b74 <fgetc+0x24>
    1b60:	2f 7b       	andi	r18, 0xBF	; 191
    1b62:	2b 83       	std	Y+3, r18	; 0x03
    1b64:	8e 81       	ldd	r24, Y+6	; 0x06
    1b66:	9f 81       	ldd	r25, Y+7	; 0x07
    1b68:	01 96       	adiw	r24, 0x01	; 1
    1b6a:	9f 83       	std	Y+7, r25	; 0x07
    1b6c:	8e 83       	std	Y+6, r24	; 0x06
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	29 c0       	rjmp	.+82     	; 0x1bc6 <fgetc+0x76>
    1b74:	22 ff       	sbrs	r18, 2
    1b76:	0f c0       	rjmp	.+30     	; 0x1b96 <fgetc+0x46>
    1b78:	e8 81       	ld	r30, Y
    1b7a:	f9 81       	ldd	r31, Y+1	; 0x01
    1b7c:	80 81       	ld	r24, Z
    1b7e:	08 2e       	mov	r0, r24
    1b80:	00 0c       	add	r0, r0
    1b82:	99 0b       	sbc	r25, r25
    1b84:	00 97       	sbiw	r24, 0x00	; 0
    1b86:	19 f4       	brne	.+6      	; 0x1b8e <fgetc+0x3e>
    1b88:	20 62       	ori	r18, 0x20	; 32
    1b8a:	2b 83       	std	Y+3, r18	; 0x03
    1b8c:	1a c0       	rjmp	.+52     	; 0x1bc2 <fgetc+0x72>
    1b8e:	31 96       	adiw	r30, 0x01	; 1
    1b90:	f9 83       	std	Y+1, r31	; 0x01
    1b92:	e8 83       	st	Y, r30
    1b94:	0e c0       	rjmp	.+28     	; 0x1bb2 <fgetc+0x62>
    1b96:	ea 85       	ldd	r30, Y+10	; 0x0a
    1b98:	fb 85       	ldd	r31, Y+11	; 0x0b
    1b9a:	09 95       	icall
    1b9c:	97 ff       	sbrs	r25, 7
    1b9e:	09 c0       	rjmp	.+18     	; 0x1bb2 <fgetc+0x62>
    1ba0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ba2:	01 96       	adiw	r24, 0x01	; 1
    1ba4:	11 f0       	breq	.+4      	; 0x1baa <fgetc+0x5a>
    1ba6:	80 e2       	ldi	r24, 0x20	; 32
    1ba8:	01 c0       	rjmp	.+2      	; 0x1bac <fgetc+0x5c>
    1baa:	80 e1       	ldi	r24, 0x10	; 16
    1bac:	82 2b       	or	r24, r18
    1bae:	8b 83       	std	Y+3, r24	; 0x03
    1bb0:	08 c0       	rjmp	.+16     	; 0x1bc2 <fgetc+0x72>
    1bb2:	2e 81       	ldd	r18, Y+6	; 0x06
    1bb4:	3f 81       	ldd	r19, Y+7	; 0x07
    1bb6:	2f 5f       	subi	r18, 0xFF	; 255
    1bb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bba:	3f 83       	std	Y+7, r19	; 0x07
    1bbc:	2e 83       	std	Y+6, r18	; 0x06
    1bbe:	99 27       	eor	r25, r25
    1bc0:	02 c0       	rjmp	.+4      	; 0x1bc6 <fgetc+0x76>
    1bc2:	8f ef       	ldi	r24, 0xFF	; 255
    1bc4:	9f ef       	ldi	r25, 0xFF	; 255
    1bc6:	df 91       	pop	r29
    1bc8:	cf 91       	pop	r28
    1bca:	08 95       	ret

00001bcc <ungetc>:
    1bcc:	fb 01       	movw	r30, r22
    1bce:	23 81       	ldd	r18, Z+3	; 0x03
    1bd0:	20 ff       	sbrs	r18, 0
    1bd2:	12 c0       	rjmp	.+36     	; 0x1bf8 <ungetc+0x2c>
    1bd4:	26 fd       	sbrc	r18, 6
    1bd6:	10 c0       	rjmp	.+32     	; 0x1bf8 <ungetc+0x2c>
    1bd8:	8f 3f       	cpi	r24, 0xFF	; 255
    1bda:	3f ef       	ldi	r19, 0xFF	; 255
    1bdc:	93 07       	cpc	r25, r19
    1bde:	61 f0       	breq	.+24     	; 0x1bf8 <ungetc+0x2c>
    1be0:	82 83       	std	Z+2, r24	; 0x02
    1be2:	2f 7d       	andi	r18, 0xDF	; 223
    1be4:	20 64       	ori	r18, 0x40	; 64
    1be6:	23 83       	std	Z+3, r18	; 0x03
    1be8:	26 81       	ldd	r18, Z+6	; 0x06
    1bea:	37 81       	ldd	r19, Z+7	; 0x07
    1bec:	21 50       	subi	r18, 0x01	; 1
    1bee:	31 09       	sbc	r19, r1
    1bf0:	37 83       	std	Z+7, r19	; 0x07
    1bf2:	26 83       	std	Z+6, r18	; 0x06
    1bf4:	99 27       	eor	r25, r25
    1bf6:	08 95       	ret
    1bf8:	8f ef       	ldi	r24, 0xFF	; 255
    1bfa:	9f ef       	ldi	r25, 0xFF	; 255
    1bfc:	08 95       	ret

00001bfe <__ultoa_invert>:
    1bfe:	fa 01       	movw	r30, r20
    1c00:	aa 27       	eor	r26, r26
    1c02:	28 30       	cpi	r18, 0x08	; 8
    1c04:	51 f1       	breq	.+84     	; 0x1c5a <__ultoa_invert+0x5c>
    1c06:	20 31       	cpi	r18, 0x10	; 16
    1c08:	81 f1       	breq	.+96     	; 0x1c6a <__ultoa_invert+0x6c>
    1c0a:	e8 94       	clt
    1c0c:	6f 93       	push	r22
    1c0e:	6e 7f       	andi	r22, 0xFE	; 254
    1c10:	6e 5f       	subi	r22, 0xFE	; 254
    1c12:	7f 4f       	sbci	r23, 0xFF	; 255
    1c14:	8f 4f       	sbci	r24, 0xFF	; 255
    1c16:	9f 4f       	sbci	r25, 0xFF	; 255
    1c18:	af 4f       	sbci	r26, 0xFF	; 255
    1c1a:	b1 e0       	ldi	r27, 0x01	; 1
    1c1c:	3e d0       	rcall	.+124    	; 0x1c9a <__ultoa_invert+0x9c>
    1c1e:	b4 e0       	ldi	r27, 0x04	; 4
    1c20:	3c d0       	rcall	.+120    	; 0x1c9a <__ultoa_invert+0x9c>
    1c22:	67 0f       	add	r22, r23
    1c24:	78 1f       	adc	r23, r24
    1c26:	89 1f       	adc	r24, r25
    1c28:	9a 1f       	adc	r25, r26
    1c2a:	a1 1d       	adc	r26, r1
    1c2c:	68 0f       	add	r22, r24
    1c2e:	79 1f       	adc	r23, r25
    1c30:	8a 1f       	adc	r24, r26
    1c32:	91 1d       	adc	r25, r1
    1c34:	a1 1d       	adc	r26, r1
    1c36:	6a 0f       	add	r22, r26
    1c38:	71 1d       	adc	r23, r1
    1c3a:	81 1d       	adc	r24, r1
    1c3c:	91 1d       	adc	r25, r1
    1c3e:	a1 1d       	adc	r26, r1
    1c40:	20 d0       	rcall	.+64     	; 0x1c82 <__ultoa_invert+0x84>
    1c42:	09 f4       	brne	.+2      	; 0x1c46 <__ultoa_invert+0x48>
    1c44:	68 94       	set
    1c46:	3f 91       	pop	r19
    1c48:	2a e0       	ldi	r18, 0x0A	; 10
    1c4a:	26 9f       	mul	r18, r22
    1c4c:	11 24       	eor	r1, r1
    1c4e:	30 19       	sub	r19, r0
    1c50:	30 5d       	subi	r19, 0xD0	; 208
    1c52:	31 93       	st	Z+, r19
    1c54:	de f6       	brtc	.-74     	; 0x1c0c <__ultoa_invert+0xe>
    1c56:	cf 01       	movw	r24, r30
    1c58:	08 95       	ret
    1c5a:	46 2f       	mov	r20, r22
    1c5c:	47 70       	andi	r20, 0x07	; 7
    1c5e:	40 5d       	subi	r20, 0xD0	; 208
    1c60:	41 93       	st	Z+, r20
    1c62:	b3 e0       	ldi	r27, 0x03	; 3
    1c64:	0f d0       	rcall	.+30     	; 0x1c84 <__ultoa_invert+0x86>
    1c66:	c9 f7       	brne	.-14     	; 0x1c5a <__ultoa_invert+0x5c>
    1c68:	f6 cf       	rjmp	.-20     	; 0x1c56 <__ultoa_invert+0x58>
    1c6a:	46 2f       	mov	r20, r22
    1c6c:	4f 70       	andi	r20, 0x0F	; 15
    1c6e:	40 5d       	subi	r20, 0xD0	; 208
    1c70:	4a 33       	cpi	r20, 0x3A	; 58
    1c72:	18 f0       	brcs	.+6      	; 0x1c7a <__ultoa_invert+0x7c>
    1c74:	49 5d       	subi	r20, 0xD9	; 217
    1c76:	31 fd       	sbrc	r19, 1
    1c78:	40 52       	subi	r20, 0x20	; 32
    1c7a:	41 93       	st	Z+, r20
    1c7c:	02 d0       	rcall	.+4      	; 0x1c82 <__ultoa_invert+0x84>
    1c7e:	a9 f7       	brne	.-22     	; 0x1c6a <__ultoa_invert+0x6c>
    1c80:	ea cf       	rjmp	.-44     	; 0x1c56 <__ultoa_invert+0x58>
    1c82:	b4 e0       	ldi	r27, 0x04	; 4
    1c84:	a6 95       	lsr	r26
    1c86:	97 95       	ror	r25
    1c88:	87 95       	ror	r24
    1c8a:	77 95       	ror	r23
    1c8c:	67 95       	ror	r22
    1c8e:	ba 95       	dec	r27
    1c90:	c9 f7       	brne	.-14     	; 0x1c84 <__ultoa_invert+0x86>
    1c92:	00 97       	sbiw	r24, 0x00	; 0
    1c94:	61 05       	cpc	r22, r1
    1c96:	71 05       	cpc	r23, r1
    1c98:	08 95       	ret
    1c9a:	9b 01       	movw	r18, r22
    1c9c:	ac 01       	movw	r20, r24
    1c9e:	0a 2e       	mov	r0, r26
    1ca0:	06 94       	lsr	r0
    1ca2:	57 95       	ror	r21
    1ca4:	47 95       	ror	r20
    1ca6:	37 95       	ror	r19
    1ca8:	27 95       	ror	r18
    1caa:	ba 95       	dec	r27
    1cac:	c9 f7       	brne	.-14     	; 0x1ca0 <__ultoa_invert+0xa2>
    1cae:	62 0f       	add	r22, r18
    1cb0:	73 1f       	adc	r23, r19
    1cb2:	84 1f       	adc	r24, r20
    1cb4:	95 1f       	adc	r25, r21
    1cb6:	a0 1d       	adc	r26, r0
    1cb8:	08 95       	ret

00001cba <__ctype_isfalse>:
    1cba:	99 27       	eor	r25, r25
    1cbc:	88 27       	eor	r24, r24

00001cbe <__ctype_istrue>:
    1cbe:	08 95       	ret

00001cc0 <__prologue_saves__>:
    1cc0:	2f 92       	push	r2
    1cc2:	3f 92       	push	r3
    1cc4:	4f 92       	push	r4
    1cc6:	5f 92       	push	r5
    1cc8:	6f 92       	push	r6
    1cca:	7f 92       	push	r7
    1ccc:	8f 92       	push	r8
    1cce:	9f 92       	push	r9
    1cd0:	af 92       	push	r10
    1cd2:	bf 92       	push	r11
    1cd4:	cf 92       	push	r12
    1cd6:	df 92       	push	r13
    1cd8:	ef 92       	push	r14
    1cda:	ff 92       	push	r15
    1cdc:	0f 93       	push	r16
    1cde:	1f 93       	push	r17
    1ce0:	cf 93       	push	r28
    1ce2:	df 93       	push	r29
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
    1ce8:	ca 1b       	sub	r28, r26
    1cea:	db 0b       	sbc	r29, r27
    1cec:	0f b6       	in	r0, 0x3f	; 63
    1cee:	f8 94       	cli
    1cf0:	de bf       	out	0x3e, r29	; 62
    1cf2:	0f be       	out	0x3f, r0	; 63
    1cf4:	cd bf       	out	0x3d, r28	; 61
    1cf6:	09 94       	ijmp

00001cf8 <__epilogue_restores__>:
    1cf8:	2a 88       	ldd	r2, Y+18	; 0x12
    1cfa:	39 88       	ldd	r3, Y+17	; 0x11
    1cfc:	48 88       	ldd	r4, Y+16	; 0x10
    1cfe:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d00:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d02:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d04:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d06:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d08:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d0a:	b9 84       	ldd	r11, Y+9	; 0x09
    1d0c:	c8 84       	ldd	r12, Y+8	; 0x08
    1d0e:	df 80       	ldd	r13, Y+7	; 0x07
    1d10:	ee 80       	ldd	r14, Y+6	; 0x06
    1d12:	fd 80       	ldd	r15, Y+5	; 0x05
    1d14:	0c 81       	ldd	r16, Y+4	; 0x04
    1d16:	1b 81       	ldd	r17, Y+3	; 0x03
    1d18:	aa 81       	ldd	r26, Y+2	; 0x02
    1d1a:	b9 81       	ldd	r27, Y+1	; 0x01
    1d1c:	ce 0f       	add	r28, r30
    1d1e:	d1 1d       	adc	r29, r1
    1d20:	0f b6       	in	r0, 0x3f	; 63
    1d22:	f8 94       	cli
    1d24:	de bf       	out	0x3e, r29	; 62
    1d26:	0f be       	out	0x3f, r0	; 63
    1d28:	cd bf       	out	0x3d, r28	; 61
    1d2a:	ed 01       	movw	r28, r26
    1d2c:	08 95       	ret

00001d2e <_exit>:
    1d2e:	f8 94       	cli

00001d30 <__stop_program>:
    1d30:	ff cf       	rjmp	.-2      	; 0x1d30 <__stop_program>
